// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: voip.proto
package red.tel.chat.generated_protobuf;

import android.os.Parcelable;
import com.squareup.wire.AndroidMessage;
import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.Map;
import okio.ByteString;

public final class FormatDescription extends AndroidMessage<FormatDescription, FormatDescription.Builder> {
  public static final ProtoAdapter<FormatDescription> ADAPTER = new ProtoAdapter_FormatDescription();

  public static final Parcelable.Creator<FormatDescription> CREATOR = AndroidMessage.newCreator(ADAPTER);

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_MEDIATYPE = 0;

  public static final Integer DEFAULT_MEDIASUBTYPE = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer mediaType;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer mediaSubtype;

  @WireField(
      tag = 3,
      keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final Map<String, String> extensions;

  public FormatDescription(Integer mediaType, Integer mediaSubtype,
      Map<String, String> extensions) {
    this(mediaType, mediaSubtype, extensions, ByteString.EMPTY);
  }

  public FormatDescription(Integer mediaType, Integer mediaSubtype, Map<String, String> extensions,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.mediaType = mediaType;
    this.mediaSubtype = mediaSubtype;
    this.extensions = Internal.immutableCopyOf("extensions", extensions);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.mediaType = mediaType;
    builder.mediaSubtype = mediaSubtype;
    builder.extensions = Internal.copyOf("extensions", extensions);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof FormatDescription)) return false;
    FormatDescription o = (FormatDescription) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(mediaType, o.mediaType)
        && Internal.equals(mediaSubtype, o.mediaSubtype)
        && extensions.equals(o.extensions);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (mediaType != null ? mediaType.hashCode() : 0);
      result = result * 37 + (mediaSubtype != null ? mediaSubtype.hashCode() : 0);
      result = result * 37 + extensions.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (mediaType != null) builder.append(", mediaType=").append(mediaType);
    if (mediaSubtype != null) builder.append(", mediaSubtype=").append(mediaSubtype);
    if (!extensions.isEmpty()) builder.append(", extensions=").append(extensions);
    return builder.replace(0, 2, "FormatDescription{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<FormatDescription, Builder> {
    public Integer mediaType;

    public Integer mediaSubtype;

    public Map<String, String> extensions;

    public Builder() {
      extensions = Internal.newMutableMap();
    }

    public Builder mediaType(Integer mediaType) {
      this.mediaType = mediaType;
      return this;
    }

    public Builder mediaSubtype(Integer mediaSubtype) {
      this.mediaSubtype = mediaSubtype;
      return this;
    }

    public Builder extensions(Map<String, String> extensions) {
      Internal.checkElementsNotNull(extensions);
      this.extensions = extensions;
      return this;
    }

    @Override
    public FormatDescription build() {
      return new FormatDescription(mediaType, mediaSubtype, extensions, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_FormatDescription extends ProtoAdapter<FormatDescription> {
    private final ProtoAdapter<Map<String, String>> extensions = ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING);

    public ProtoAdapter_FormatDescription() {
      super(FieldEncoding.LENGTH_DELIMITED, FormatDescription.class);
    }

    @Override
    public int encodedSize(FormatDescription value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.mediaType)
          + ProtoAdapter.UINT32.encodedSizeWithTag(2, value.mediaSubtype)
          + extensions.encodedSizeWithTag(3, value.extensions)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, FormatDescription value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.mediaType);
      ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.mediaSubtype);
      extensions.encodeWithTag(writer, 3, value.extensions);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public FormatDescription decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.mediaType(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.mediaSubtype(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.extensions.putAll(extensions.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public FormatDescription redact(FormatDescription value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
