// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: voip.proto
package red.tel.chat.generated_protobuf;

import android.os.Parcelable;
import com.squareup.wire.AndroidMessage;
import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.Map;
import okio.ByteString;

public final class Image extends AndroidMessage<Image, Image.Builder> {
  public static final ProtoAdapter<Image> ADAPTER = new ProtoAdapter_Image();

  public static final Parcelable.Creator<Image> CREATOR = AndroidMessage.newCreator(ADAPTER);

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_WIDTH = 0L;

  public static final Long DEFAULT_HEIGHT = 0L;

  public static final Integer DEFAULT_FORMAT = 0;

  public static final ByteString DEFAULT_DATA = ByteString.EMPTY;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long width;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long height;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer format;

  @WireField(
      tag = 4,
      keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final Map<String, String> attachments;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString data;

  public Image(Long width, Long height, Integer format, Map<String, String> attachments,
      ByteString data) {
    this(width, height, format, attachments, data, ByteString.EMPTY);
  }

  public Image(Long width, Long height, Integer format, Map<String, String> attachments,
      ByteString data, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.width = width;
    this.height = height;
    this.format = format;
    this.attachments = Internal.immutableCopyOf("attachments", attachments);
    this.data = data;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.width = width;
    builder.height = height;
    builder.format = format;
    builder.attachments = Internal.copyOf("attachments", attachments);
    builder.data = data;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Image)) return false;
    Image o = (Image) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(width, o.width)
        && Internal.equals(height, o.height)
        && Internal.equals(format, o.format)
        && attachments.equals(o.attachments)
        && Internal.equals(data, o.data);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (width != null ? width.hashCode() : 0);
      result = result * 37 + (height != null ? height.hashCode() : 0);
      result = result * 37 + (format != null ? format.hashCode() : 0);
      result = result * 37 + attachments.hashCode();
      result = result * 37 + (data != null ? data.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (width != null) builder.append(", width=").append(width);
    if (height != null) builder.append(", height=").append(height);
    if (format != null) builder.append(", format=").append(format);
    if (!attachments.isEmpty()) builder.append(", attachments=").append(attachments);
    if (data != null) builder.append(", data=").append(data);
    return builder.replace(0, 2, "Image{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Image, Builder> {
    public Long width;

    public Long height;

    public Integer format;

    public Map<String, String> attachments;

    public ByteString data;

    public Builder() {
      attachments = Internal.newMutableMap();
    }

    public Builder width(Long width) {
      this.width = width;
      return this;
    }

    public Builder height(Long height) {
      this.height = height;
      return this;
    }

    public Builder format(Integer format) {
      this.format = format;
      return this;
    }

    public Builder attachments(Map<String, String> attachments) {
      Internal.checkElementsNotNull(attachments);
      this.attachments = attachments;
      return this;
    }

    public Builder data(ByteString data) {
      this.data = data;
      return this;
    }

    @Override
    public Image build() {
      return new Image(width, height, format, attachments, data, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Image extends ProtoAdapter<Image> {
    private final ProtoAdapter<Map<String, String>> attachments = ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING);

    public ProtoAdapter_Image() {
      super(FieldEncoding.LENGTH_DELIMITED, Image.class);
    }

    @Override
    public int encodedSize(Image value) {
      return ProtoAdapter.INT64.encodedSizeWithTag(1, value.width)
          + ProtoAdapter.INT64.encodedSizeWithTag(2, value.height)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.format)
          + attachments.encodedSizeWithTag(4, value.attachments)
          + ProtoAdapter.BYTES.encodedSizeWithTag(5, value.data)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Image value) throws IOException {
      ProtoAdapter.INT64.encodeWithTag(writer, 1, value.width);
      ProtoAdapter.INT64.encodeWithTag(writer, 2, value.height);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.format);
      attachments.encodeWithTag(writer, 4, value.attachments);
      ProtoAdapter.BYTES.encodeWithTag(writer, 5, value.data);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Image decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.width(ProtoAdapter.INT64.decode(reader)); break;
          case 2: builder.height(ProtoAdapter.INT64.decode(reader)); break;
          case 3: builder.format(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.attachments.putAll(attachments.decode(reader)); break;
          case 5: builder.data(ProtoAdapter.BYTES.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Image redact(Image value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
