// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: voip.proto
package red.tel.chat.generated_protobuf;

import android.os.Parcelable;
import com.squareup.wire.AndroidMessage;
import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class File extends AndroidMessage<File, File.Builder> {
  public static final ProtoAdapter<File> ADAPTER = new ProtoAdapter_File();

  public static final Parcelable.Creator<File> CREATOR = AndroidMessage.newCreator(ADAPTER);

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_SEQUENCE = 0L;

  public static final Long DEFAULT_TOTALSIZE = 0L;

  public static final ByteString DEFAULT_BODY = ByteString.EMPTY;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long sequence;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long totalSize;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString body;

  public File(Long sequence, Long totalSize, ByteString body) {
    this(sequence, totalSize, body, ByteString.EMPTY);
  }

  public File(Long sequence, Long totalSize, ByteString body, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.sequence = sequence;
    this.totalSize = totalSize;
    this.body = body;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.sequence = sequence;
    builder.totalSize = totalSize;
    builder.body = body;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof File)) return false;
    File o = (File) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(sequence, o.sequence)
        && Internal.equals(totalSize, o.totalSize)
        && Internal.equals(body, o.body);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (sequence != null ? sequence.hashCode() : 0);
      result = result * 37 + (totalSize != null ? totalSize.hashCode() : 0);
      result = result * 37 + (body != null ? body.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (sequence != null) builder.append(", sequence=").append(sequence);
    if (totalSize != null) builder.append(", totalSize=").append(totalSize);
    if (body != null) builder.append(", body=").append(body);
    return builder.replace(0, 2, "File{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<File, Builder> {
    public Long sequence;

    public Long totalSize;

    public ByteString body;

    public Builder() {
    }

    public Builder sequence(Long sequence) {
      this.sequence = sequence;
      return this;
    }

    public Builder totalSize(Long totalSize) {
      this.totalSize = totalSize;
      return this;
    }

    public Builder body(ByteString body) {
      this.body = body;
      return this;
    }

    @Override
    public File build() {
      return new File(sequence, totalSize, body, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_File extends ProtoAdapter<File> {
    public ProtoAdapter_File() {
      super(FieldEncoding.LENGTH_DELIMITED, File.class);
    }

    @Override
    public int encodedSize(File value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.sequence)
          + ProtoAdapter.UINT64.encodedSizeWithTag(2, value.totalSize)
          + ProtoAdapter.BYTES.encodedSizeWithTag(3, value.body)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, File value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.sequence);
      ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.totalSize);
      ProtoAdapter.BYTES.encodeWithTag(writer, 3, value.body);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public File decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.sequence(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.totalSize(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.body(ProtoAdapter.BYTES.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public File redact(File value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
