// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: voip.proto
package red.tel.chat.generated_protobuf;

import android.os.Parcelable;
import com.squareup.wire.AndroidMessage;
import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class Time extends AndroidMessage<Time, Time.Builder> {
  public static final ProtoAdapter<Time> ADAPTER = new ProtoAdapter_Time();

  public static final Parcelable.Creator<Time> CREATOR = AndroidMessage.newCreator(ADAPTER);

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_VALUE = 0L;

  public static final Integer DEFAULT_SCALE = 0;

  public static final Integer DEFAULT_FLAGS = 0;

  public static final Long DEFAULT_EPOCH = 0L;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long value;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer scale;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer flags;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long epoch;

  public Time(Long value, Integer scale, Integer flags, Long epoch) {
    this(value, scale, flags, epoch, ByteString.EMPTY);
  }

  public Time(Long value, Integer scale, Integer flags, Long epoch, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.value = value;
    this.scale = scale;
    this.flags = flags;
    this.epoch = epoch;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.value = value;
    builder.scale = scale;
    builder.flags = flags;
    builder.epoch = epoch;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Time)) return false;
    Time o = (Time) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(value, o.value)
        && Internal.equals(scale, o.scale)
        && Internal.equals(flags, o.flags)
        && Internal.equals(epoch, o.epoch);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (value != null ? value.hashCode() : 0);
      result = result * 37 + (scale != null ? scale.hashCode() : 0);
      result = result * 37 + (flags != null ? flags.hashCode() : 0);
      result = result * 37 + (epoch != null ? epoch.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (value != null) builder.append(", value=").append(value);
    if (scale != null) builder.append(", scale=").append(scale);
    if (flags != null) builder.append(", flags=").append(flags);
    if (epoch != null) builder.append(", epoch=").append(epoch);
    return builder.replace(0, 2, "Time{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Time, Builder> {
    public Long value;

    public Integer scale;

    public Integer flags;

    public Long epoch;

    public Builder() {
    }

    public Builder value(Long value) {
      this.value = value;
      return this;
    }

    public Builder scale(Integer scale) {
      this.scale = scale;
      return this;
    }

    public Builder flags(Integer flags) {
      this.flags = flags;
      return this;
    }

    public Builder epoch(Long epoch) {
      this.epoch = epoch;
      return this;
    }

    @Override
    public Time build() {
      return new Time(value, scale, flags, epoch, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Time extends ProtoAdapter<Time> {
    public ProtoAdapter_Time() {
      super(FieldEncoding.LENGTH_DELIMITED, Time.class);
    }

    @Override
    public int encodedSize(Time value) {
      return ProtoAdapter.INT64.encodedSizeWithTag(1, value.value)
          + ProtoAdapter.INT32.encodedSizeWithTag(2, value.scale)
          + ProtoAdapter.UINT32.encodedSizeWithTag(3, value.flags)
          + ProtoAdapter.INT64.encodedSizeWithTag(4, value.epoch)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Time value) throws IOException {
      ProtoAdapter.INT64.encodeWithTag(writer, 1, value.value);
      ProtoAdapter.INT32.encodeWithTag(writer, 2, value.scale);
      ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.flags);
      ProtoAdapter.INT64.encodeWithTag(writer, 4, value.epoch);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Time decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.value(ProtoAdapter.INT64.decode(reader)); break;
          case 2: builder.scale(ProtoAdapter.INT32.decode(reader)); break;
          case 3: builder.flags(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.epoch(ProtoAdapter.INT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Time redact(Time value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
