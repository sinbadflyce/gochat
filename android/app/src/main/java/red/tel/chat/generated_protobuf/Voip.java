// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: voip.proto
package red.tel.chat.generated_protobuf;

import android.os.Parcelable;
import com.squareup.wire.AndroidMessage;
import com.squareup.wire.EnumAdapter;
import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireEnum;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class Voip extends AndroidMessage<Voip, Voip.Builder> {
  public static final ProtoAdapter<Voip> ADAPTER = new ProtoAdapter_Voip();

  public static final Parcelable.Creator<Voip> CREATOR = AndroidMessage.newCreator(ADAPTER);

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_VERSION = 0;

  public static final Which DEFAULT_WHICH = Which.TEXT;

  public static final ByteString DEFAULT_PAYLOAD = ByteString.EMPTY;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer version;

  @WireField(
      tag = 12,
      adapter = "red.tel.chat.generated_protobuf.Voip$Which#ADAPTER"
  )
  public final Which which;

  @WireField(
      tag = 101,
      adapter = "red.tel.chat.generated_protobuf.Text#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Text> textStorage;

  @WireField(
      tag = 102,
      adapter = "red.tel.chat.generated_protobuf.File#ADAPTER"
  )
  public final File file;

  @WireField(
      tag = 103,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString payload;

  @WireField(
      tag = 104,
      adapter = "red.tel.chat.generated_protobuf.Call#ADAPTER"
  )
  public final Call call;

  @WireField(
      tag = 105,
      adapter = "red.tel.chat.generated_protobuf.Av#ADAPTER"
  )
  public final Av av;

  @WireField(
      tag = 106,
      adapter = "red.tel.chat.generated_protobuf.AVSession#ADAPTER"
  )
  public final AVSession audioSession;

  @WireField(
      tag = 107,
      adapter = "red.tel.chat.generated_protobuf.AVSession#ADAPTER"
  )
  public final AVSession videoSession;

  @WireField(
      tag = 18,
      adapter = "red.tel.chat.generated_protobuf.AVQuality#ADAPTER"
  )
  public final AVQuality avQuality;

  public Voip(Integer version, Which which, List<Text> textStorage, File file, ByteString payload,
      Call call, Av av, AVSession audioSession, AVSession videoSession, AVQuality avQuality) {
    this(version, which, textStorage, file, payload, call, av, audioSession, videoSession, avQuality, ByteString.EMPTY);
  }

  public Voip(Integer version, Which which, List<Text> textStorage, File file, ByteString payload,
      Call call, Av av, AVSession audioSession, AVSession videoSession, AVQuality avQuality,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.version = version;
    this.which = which;
    this.textStorage = Internal.immutableCopyOf("textStorage", textStorage);
    this.file = file;
    this.payload = payload;
    this.call = call;
    this.av = av;
    this.audioSession = audioSession;
    this.videoSession = videoSession;
    this.avQuality = avQuality;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.version = version;
    builder.which = which;
    builder.textStorage = Internal.copyOf("textStorage", textStorage);
    builder.file = file;
    builder.payload = payload;
    builder.call = call;
    builder.av = av;
    builder.audioSession = audioSession;
    builder.videoSession = videoSession;
    builder.avQuality = avQuality;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Voip)) return false;
    Voip o = (Voip) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(version, o.version)
        && Internal.equals(which, o.which)
        && textStorage.equals(o.textStorage)
        && Internal.equals(file, o.file)
        && Internal.equals(payload, o.payload)
        && Internal.equals(call, o.call)
        && Internal.equals(av, o.av)
        && Internal.equals(audioSession, o.audioSession)
        && Internal.equals(videoSession, o.videoSession)
        && Internal.equals(avQuality, o.avQuality);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (version != null ? version.hashCode() : 0);
      result = result * 37 + (which != null ? which.hashCode() : 0);
      result = result * 37 + textStorage.hashCode();
      result = result * 37 + (file != null ? file.hashCode() : 0);
      result = result * 37 + (payload != null ? payload.hashCode() : 0);
      result = result * 37 + (call != null ? call.hashCode() : 0);
      result = result * 37 + (av != null ? av.hashCode() : 0);
      result = result * 37 + (audioSession != null ? audioSession.hashCode() : 0);
      result = result * 37 + (videoSession != null ? videoSession.hashCode() : 0);
      result = result * 37 + (avQuality != null ? avQuality.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (version != null) builder.append(", version=").append(version);
    if (which != null) builder.append(", which=").append(which);
    if (!textStorage.isEmpty()) builder.append(", textStorage=").append(textStorage);
    if (file != null) builder.append(", file=").append(file);
    if (payload != null) builder.append(", payload=").append(payload);
    if (call != null) builder.append(", call=").append(call);
    if (av != null) builder.append(", av=").append(av);
    if (audioSession != null) builder.append(", audioSession=").append(audioSession);
    if (videoSession != null) builder.append(", videoSession=").append(videoSession);
    if (avQuality != null) builder.append(", avQuality=").append(avQuality);
    return builder.replace(0, 2, "Voip{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Voip, Builder> {
    public Integer version;

    public Which which;

    public List<Text> textStorage;

    public File file;

    public ByteString payload;

    public Call call;

    public Av av;

    public AVSession audioSession;

    public AVSession videoSession;

    public AVQuality avQuality;

    public Builder() {
      textStorage = Internal.newMutableList();
    }

    public Builder version(Integer version) {
      this.version = version;
      return this;
    }

    public Builder which(Which which) {
      this.which = which;
      return this;
    }

    public Builder textStorage(List<Text> textStorage) {
      Internal.checkElementsNotNull(textStorage);
      this.textStorage = textStorage;
      return this;
    }

    public Builder file(File file) {
      this.file = file;
      return this;
    }

    public Builder payload(ByteString payload) {
      this.payload = payload;
      return this;
    }

    public Builder call(Call call) {
      this.call = call;
      return this;
    }

    public Builder av(Av av) {
      this.av = av;
      return this;
    }

    public Builder audioSession(AVSession audioSession) {
      this.audioSession = audioSession;
      return this;
    }

    public Builder videoSession(AVSession videoSession) {
      this.videoSession = videoSession;
      return this;
    }

    public Builder avQuality(AVQuality avQuality) {
      this.avQuality = avQuality;
      return this;
    }

    @Override
    public Voip build() {
      return new Voip(version, which, textStorage, file, payload, call, av, audioSession, videoSession, avQuality, super.buildUnknownFields());
    }
  }

  /**
   * Identifies which field is filled in
   */
  public enum Which implements WireEnum {
    TEXT(0),

    FILE(1),

    AV(2),

    AudioSession(3),

    VideoSession(4),

    CALL_PROPOSAL(5),

    CALL_CANCEL(6),

    CALL_ACCEPT(7),

    CALL_DECLINE(8),

    CALL_START_OUTGOING(9),

    CALL_START_INCOMING(10),

    CALL_QUALITY(11),

    CALL_STOP(12);

    public static final ProtoAdapter<Which> ADAPTER = new ProtoAdapter_Which();

    private final int value;

    Which(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static Which fromValue(int value) {
      switch (value) {
        case 0: return TEXT;
        case 1: return FILE;
        case 2: return AV;
        case 3: return AudioSession;
        case 4: return VideoSession;
        case 5: return CALL_PROPOSAL;
        case 6: return CALL_CANCEL;
        case 7: return CALL_ACCEPT;
        case 8: return CALL_DECLINE;
        case 9: return CALL_START_OUTGOING;
        case 10: return CALL_START_INCOMING;
        case 11: return CALL_QUALITY;
        case 12: return CALL_STOP;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }

    private static final class ProtoAdapter_Which extends EnumAdapter<Which> {
      ProtoAdapter_Which() {
        super(Which.class);
      }

      @Override
      protected Which fromValue(int value) {
        return Which.fromValue(value);
      }
    }
  }

  private static final class ProtoAdapter_Voip extends ProtoAdapter<Voip> {
    public ProtoAdapter_Voip() {
      super(FieldEncoding.LENGTH_DELIMITED, Voip.class);
    }

    @Override
    public int encodedSize(Voip value) {
      return ProtoAdapter.UINT32.encodedSizeWithTag(1, value.version)
          + Which.ADAPTER.encodedSizeWithTag(12, value.which)
          + Text.ADAPTER.asRepeated().encodedSizeWithTag(101, value.textStorage)
          + File.ADAPTER.encodedSizeWithTag(102, value.file)
          + ProtoAdapter.BYTES.encodedSizeWithTag(103, value.payload)
          + Call.ADAPTER.encodedSizeWithTag(104, value.call)
          + Av.ADAPTER.encodedSizeWithTag(105, value.av)
          + AVSession.ADAPTER.encodedSizeWithTag(106, value.audioSession)
          + AVSession.ADAPTER.encodedSizeWithTag(107, value.videoSession)
          + AVQuality.ADAPTER.encodedSizeWithTag(18, value.avQuality)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Voip value) throws IOException {
      ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.version);
      Which.ADAPTER.encodeWithTag(writer, 12, value.which);
      Text.ADAPTER.asRepeated().encodeWithTag(writer, 101, value.textStorage);
      File.ADAPTER.encodeWithTag(writer, 102, value.file);
      ProtoAdapter.BYTES.encodeWithTag(writer, 103, value.payload);
      Call.ADAPTER.encodeWithTag(writer, 104, value.call);
      Av.ADAPTER.encodeWithTag(writer, 105, value.av);
      AVSession.ADAPTER.encodeWithTag(writer, 106, value.audioSession);
      AVSession.ADAPTER.encodeWithTag(writer, 107, value.videoSession);
      AVQuality.ADAPTER.encodeWithTag(writer, 18, value.avQuality);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Voip decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.version(ProtoAdapter.UINT32.decode(reader)); break;
          case 12: {
            try {
              builder.which(Which.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 18: builder.avQuality(AVQuality.ADAPTER.decode(reader)); break;
          case 101: builder.textStorage.add(Text.ADAPTER.decode(reader)); break;
          case 102: builder.file(File.ADAPTER.decode(reader)); break;
          case 103: builder.payload(ProtoAdapter.BYTES.decode(reader)); break;
          case 104: builder.call(Call.ADAPTER.decode(reader)); break;
          case 105: builder.av(Av.ADAPTER.decode(reader)); break;
          case 106: builder.audioSession(AVSession.ADAPTER.decode(reader)); break;
          case 107: builder.videoSession(AVSession.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Voip redact(Voip value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.textStorage, Text.ADAPTER);
      if (builder.file != null) builder.file = File.ADAPTER.redact(builder.file);
      if (builder.call != null) builder.call = Call.ADAPTER.redact(builder.call);
      if (builder.av != null) builder.av = Av.ADAPTER.redact(builder.av);
      if (builder.audioSession != null) builder.audioSession = AVSession.ADAPTER.redact(builder.audioSession);
      if (builder.videoSession != null) builder.videoSession = AVSession.ADAPTER.redact(builder.videoSession);
      if (builder.avQuality != null) builder.avQuality = AVQuality.ADAPTER.redact(builder.avQuality);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
