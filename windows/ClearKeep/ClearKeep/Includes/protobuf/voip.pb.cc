// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: voip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "voip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class TextDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Text>
     _instance;
} _Text_default_instance_;
class FileDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<File>
     _instance;
} _File_default_instance_;
class CallDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Call>
     _instance;
} _Call_default_instance_;
class TimeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Time>
     _instance;
} _Time_default_instance_;
class TimestampDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Timestamp>
     _instance;
} _Timestamp_default_instance_;
class Image_AttachmentsEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Image::Image_AttachmentsEntry>
     _instance;
} _Image_AttachmentsEntry_default_instance_;
class ImageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Image>
     _instance;
} _Image_default_instance_;
class FormatDescription_ExtensionsEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FormatDescription::FormatDescription_ExtensionsEntry>
     _instance;
} _FormatDescription_ExtensionsEntry_default_instance_;
class FormatDescriptionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FormatDescription>
     _instance;
} _FormatDescription_default_instance_;
class VideoSampleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VideoSample>
     _instance;
} _VideoSample_default_instance_;
class AudioSampleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AudioSample>
     _instance;
} _AudioSample_default_instance_;
class AvDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Av>
     _instance;
} _Av_default_instance_;
class AVSessionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AVSession>
     _instance;
} _AVSession_default_instance_;
class AVQualityDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AVQuality>
     _instance;
} _AVQuality_default_instance_;
class VoipDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Voip>
     _instance;
} _Voip_default_instance_;

namespace protobuf_voip_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, body_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, totalsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, body_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, audio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, video_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, epoch_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, presentation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, attachments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatDescription, mediatype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatDescription, mediasubtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatDescription, extensions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoSample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoSample, image_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioSample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioSample, image_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Av, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Av, video_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Av, audio_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AVSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AVSession, sid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AVSession, gid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AVSession, active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AVSession, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AVQuality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AVQuality, diff_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Voip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Voip, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Voip, which_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Voip, textstorage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Voip, file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Voip, payload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Voip, call_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Voip, av_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Voip, audiosession_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Voip, videosession_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Voip, avquality_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Text)},
  { 8, -1, sizeof(File)},
  { 16, -1, sizeof(Call)},
  { 26, -1, sizeof(Time)},
  { 35, -1, sizeof(Timestamp)},
  { 42, -1, sizeof(Image)},
  { 52, -1, sizeof(FormatDescription)},
  { 60, -1, sizeof(VideoSample)},
  { 66, -1, sizeof(AudioSample)},
  { 72, -1, sizeof(Av)},
  { 79, -1, sizeof(AVSession)},
  { 88, -1, sizeof(AVQuality)},
  { 94, -1, sizeof(Voip)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Text_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_File_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Call_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Time_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Timestamp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Image_AttachmentsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Image_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FormatDescription_ExtensionsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FormatDescription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoSample_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AudioSample_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Av_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AVSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AVQuality_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Voip_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "voip.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[5].reflection = Image::Image_AttachmentsEntry::CreateReflection(file_level_metadata[5].descriptor, _Image_AttachmentsEntry_default_instance_._instance.get_mutable());
file_level_metadata[7].reflection = FormatDescription::FormatDescription_ExtensionsEntry::CreateReflection(file_level_metadata[7].descriptor, _FormatDescription_ExtensionsEntry_default_instance_._instance.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Text_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Text_default_instance_);_File_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_File_default_instance_);_Call_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Call_default_instance_);_Time_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Time_default_instance_);_Timestamp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Timestamp_default_instance_);_Image_AttachmentsEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Image_AttachmentsEntry_default_instance_);_Image_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Image_default_instance_);_FormatDescription_ExtensionsEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FormatDescription_ExtensionsEntry_default_instance_);_FormatDescription_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FormatDescription_default_instance_);_VideoSample_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VideoSample_default_instance_);_AudioSample_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AudioSample_default_instance_);_Av_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Av_default_instance_);_AVSession_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AVSession_default_instance_);_AVQuality_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AVQuality_default_instance_);_Voip_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Voip_default_instance_);_Timestamp_default_instance_._instance.get_mutable()->duration_ = const_cast< ::Time*>(
      ::Time::internal_default_instance());
  _Timestamp_default_instance_._instance.get_mutable()->presentation_ = const_cast< ::Time*>(
      ::Time::internal_default_instance());
  _Image_AttachmentsEntry_default_instance_._instance.get_mutable()->set_default_instance(_Image_AttachmentsEntry_default_instance_._instance.get_mutable());
  _Image_AttachmentsEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _FormatDescription_ExtensionsEntry_default_instance_._instance.get_mutable()->set_default_instance(_FormatDescription_ExtensionsEntry_default_instance_._instance.get_mutable());
  _FormatDescription_ExtensionsEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _VideoSample_default_instance_._instance.get_mutable()->image_ = const_cast< ::Image*>(
      ::Image::internal_default_instance());
  _AudioSample_default_instance_._instance.get_mutable()->image_ = const_cast< ::Image*>(
      ::Image::internal_default_instance());
  _Av_default_instance_._instance.get_mutable()->video_ = const_cast< ::VideoSample*>(
      ::VideoSample::internal_default_instance());
  _Av_default_instance_._instance.get_mutable()->audio_ = const_cast< ::AudioSample*>(
      ::AudioSample::internal_default_instance());
  _Voip_default_instance_._instance.get_mutable()->file_ = const_cast< ::File*>(
      ::File::internal_default_instance());
  _Voip_default_instance_._instance.get_mutable()->call_ = const_cast< ::Call*>(
      ::Call::internal_default_instance());
  _Voip_default_instance_._instance.get_mutable()->av_ = const_cast< ::Av*>(
      ::Av::internal_default_instance());
  _Voip_default_instance_._instance.get_mutable()->audiosession_ = const_cast< ::AVSession*>(
      ::AVSession::internal_default_instance());
  _Voip_default_instance_._instance.get_mutable()->videosession_ = const_cast< ::AVSession*>(
      ::AVSession::internal_default_instance());
  _Voip_default_instance_._instance.get_mutable()->avquality_ = const_cast< ::AVQuality*>(
      ::AVQuality::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nvoip.proto\".\n\004Text\022\014\n\004from\030\001 \001(\t\022\n\n\002to"
      "\030\002 \001(\t\022\014\n\004body\030\003 \001(\014\"9\n\004File\022\020\n\010sequence"
      "\030\001 \001(\004\022\021\n\ttotalSize\030\002 \001(\004\022\014\n\004body\030\003 \001(\014\""
      "K\n\004Call\022\013\n\003key\030\001 \001(\t\022\n\n\002to\030\002 \001(\t\022\014\n\004from"
      "\030\003 \001(\t\022\r\n\005audio\030\004 \001(\010\022\r\n\005video\030\005 \001(\010\"B\n\004"
      "Time\022\r\n\005value\030\001 \001(\003\022\r\n\005scale\030\002 \001(\005\022\r\n\005fl"
      "ags\030\003 \001(\r\022\r\n\005epoch\030\004 \001(\003\"A\n\tTimestamp\022\027\n"
      "\010duration\030\001 \001(\0132\005.Time\022\033\n\014presentation\030\002"
      " \001(\0132\005.Time\"\246\001\n\005Image\022\r\n\005width\030\001 \001(\003\022\016\n\006"
      "height\030\002 \001(\003\022\016\n\006format\030\003 \001(\r\022,\n\013attachme"
      "nts\030\004 \003(\0132\027.Image.AttachmentsEntry\022\014\n\004da"
      "ta\030\005 \001(\014\0322\n\020AttachmentsEntry\022\013\n\003key\030\001 \001("
      "\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\247\001\n\021FormatDescripti"
      "on\022\021\n\tmediaType\030\001 \001(\r\022\024\n\014mediaSubtype\030\002 "
      "\001(\r\0226\n\nextensions\030\003 \003(\0132\".FormatDescript"
      "ion.ExtensionsEntry\0321\n\017ExtensionsEntry\022\013"
      "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"$\n\013VideoS"
      "ample\022\025\n\005image\030\001 \001(\0132\006.Image\"$\n\013AudioSam"
      "ple\022\025\n\005image\030\001 \001(\0132\006.Image\">\n\002Av\022\033\n\005vide"
      "o\030\001 \001(\0132\014.VideoSample\022\033\n\005audio\030\002 \001(\0132\014.A"
      "udioSample\"C\n\tAVSession\022\013\n\003sid\030\001 \001(\t\022\013\n\003"
      "gid\030\002 \001(\t\022\016\n\006active\030\003 \001(\010\022\014\n\004data\030\004 \001(\014\""
      "\031\n\tAVQuality\022\014\n\004diff\030\001 \001(\005\"\342\003\n\004Voip\022\017\n\007v"
      "ersion\030\001 \001(\r\022\032\n\005which\030\014 \001(\0162\013.Voip.Which"
      "\022\032\n\013textStorage\030e \003(\0132\005.Text\022\023\n\004file\030f \001"
      "(\0132\005.File\022\017\n\007payload\030g \001(\014\022\023\n\004call\030h \001(\013"
      "2\005.Call\022\017\n\002av\030i \001(\0132\003.Av\022 \n\014audioSession"
      "\030j \001(\0132\n.AVSession\022 \n\014videoSession\030k \001(\013"
      "2\n.AVSession\022\035\n\tavQuality\030\022 \001(\0132\n.AVQual"
      "ity\"\341\001\n\005Which\022\010\n\004TEXT\020\000\022\010\n\004FILE\020\001\022\006\n\002AV\020"
      "\002\022\020\n\014AudioSession\020\003\022\020\n\014VideoSession\020\004\022\021\n"
      "\rCALL_PROPOSAL\020\005\022\017\n\013CALL_CANCEL\020\006\022\017\n\013CAL"
      "L_ACCEPT\020\007\022\020\n\014CALL_DECLINE\020\010\022\027\n\023CALL_STA"
      "RT_OUTGOING\020\t\022\027\n\023CALL_START_INCOMING\020\n\022\020"
      "\n\014CALL_QUALITY\020\013\022\r\n\tCALL_STOP\020\014B\'\n\037red.t"
      "el.chat.generated_protobufZ\004mainb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1440);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "voip.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_voip_2eproto

const ::google::protobuf::EnumDescriptor* Voip_Which_descriptor() {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_enum_descriptors[0];
}
bool Voip_Which_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Voip_Which Voip::TEXT;
const Voip_Which Voip::FILE;
const Voip_Which Voip::AV;
const Voip_Which Voip::AudioSession;
const Voip_Which Voip::VideoSession;
const Voip_Which Voip::CALL_PROPOSAL;
const Voip_Which Voip::CALL_CANCEL;
const Voip_Which Voip::CALL_ACCEPT;
const Voip_Which Voip::CALL_DECLINE;
const Voip_Which Voip::CALL_START_OUTGOING;
const Voip_Which Voip::CALL_START_INCOMING;
const Voip_Which Voip::CALL_QUALITY;
const Voip_Which Voip::CALL_STOP;
const Voip_Which Voip::Which_MIN;
const Voip_Which Voip::Which_MAX;
const int Voip::Which_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Text::kFromFieldNumber;
const int Text::kToFieldNumber;
const int Text::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Text::Text()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_voip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Text)
}
Text::Text(const Text& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from().size() > 0) {
    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.to().size() > 0) {
    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.body().size() > 0) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  // @@protoc_insertion_point(copy_constructor:Text)
}

void Text::SharedCtor() {
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Text::~Text() {
  // @@protoc_insertion_point(destructor:Text)
  SharedDtor();
}

void Text::SharedDtor() {
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Text::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Text::descriptor() {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Text& Text::default_instance() {
  protobuf_voip_2eproto::InitDefaults();
  return *internal_default_instance();
}

Text* Text::New(::google::protobuf::Arena* arena) const {
  Text* n = new Text;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Text::Clear() {
// @@protoc_insertion_point(message_clear_start:Text)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Text::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Text)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string from = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from().data(), static_cast<int>(this->from().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Text.from"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string to = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to().data(), static_cast<int>(this->to().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Text.to"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes body = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Text)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Text)
  return false;
#undef DO_
}

void Text::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Text)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from = 1;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), static_cast<int>(this->from().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Text.from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from(), output);
  }

  // string to = 2;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to().data(), static_cast<int>(this->to().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Text.to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->to(), output);
  }

  // bytes body = 3;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->body(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Text)
}

::google::protobuf::uint8* Text::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Text)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from = 1;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), static_cast<int>(this->from().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Text.from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from(), target);
  }

  // string to = 2;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to().data(), static_cast<int>(this->to().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Text.to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->to(), target);
  }

  // bytes body = 3;
  if (this->body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->body(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Text)
  return target;
}

size_t Text::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Text)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from());
  }

  // string to = 2;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to());
  }

  // bytes body = 3;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Text::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Text)
  GOOGLE_DCHECK_NE(&from, this);
  const Text* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Text>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Text)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Text)
    MergeFrom(*source);
  }
}

void Text::MergeFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Text)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.to().size() > 0) {

    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
}

void Text::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Text::CopyFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {
  return true;
}

void Text::Swap(Text* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Text::InternalSwap(Text* other) {
  using std::swap;
  from_.Swap(&other->from_);
  to_.Swap(&other->to_);
  body_.Swap(&other->body_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Text::GetMetadata() const {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Text

// string from = 1;
void Text::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Text::from() const {
  // @@protoc_insertion_point(field_get:Text.from)
  return from_.GetNoArena();
}
void Text::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Text.from)
}
#if LANG_CXX11
void Text::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Text.from)
}
#endif
void Text::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Text.from)
}
void Text::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Text.from)
}
::std::string* Text::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:Text.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Text::release_from() {
  // @@protoc_insertion_point(field_release:Text.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Text::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:Text.from)
}

// string to = 2;
void Text::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Text::to() const {
  // @@protoc_insertion_point(field_get:Text.to)
  return to_.GetNoArena();
}
void Text::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Text.to)
}
#if LANG_CXX11
void Text::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Text.to)
}
#endif
void Text::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Text.to)
}
void Text::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Text.to)
}
::std::string* Text::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:Text.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Text::release_to() {
  // @@protoc_insertion_point(field_release:Text.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Text::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:Text.to)
}

// bytes body = 3;
void Text::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Text::body() const {
  // @@protoc_insertion_point(field_get:Text.body)
  return body_.GetNoArena();
}
void Text::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Text.body)
}
#if LANG_CXX11
void Text::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Text.body)
}
#endif
void Text::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Text.body)
}
void Text::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Text.body)
}
::std::string* Text::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:Text.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Text::release_body() {
  // @@protoc_insertion_point(field_release:Text.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Text::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:Text.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int File::kSequenceFieldNumber;
const int File::kTotalSizeFieldNumber;
const int File::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

File::File()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_voip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:File)
}
File::File(const File& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.body().size() > 0) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  ::memcpy(&sequence_, &from.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalsize_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(totalsize_));
  // @@protoc_insertion_point(copy_constructor:File)
}

void File::SharedCtor() {
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalsize_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(totalsize_));
  _cached_size_ = 0;
}

File::~File() {
  // @@protoc_insertion_point(destructor:File)
  SharedDtor();
}

void File::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* File::descriptor() {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const File& File::default_instance() {
  protobuf_voip_2eproto::InitDefaults();
  return *internal_default_instance();
}

File* File::New(::google::protobuf::Arena* arena) const {
  File* n = new File;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void File::Clear() {
// @@protoc_insertion_point(message_clear_start:File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalsize_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(totalsize_));
  _internal_metadata_.Clear();
}

bool File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:File)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 sequence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 totalSize = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes body = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:File)
  return false;
#undef DO_
}

void File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sequence = 1;
  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sequence(), output);
  }

  // uint64 totalSize = 2;
  if (this->totalsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->totalsize(), output);
  }

  // bytes body = 3;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->body(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:File)
}

::google::protobuf::uint8* File::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sequence = 1;
  if (this->sequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sequence(), target);
  }

  // uint64 totalSize = 2;
  if (this->totalsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->totalsize(), target);
  }

  // bytes body = 3;
  if (this->body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->body(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:File)
  return target;
}

size_t File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:File)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes body = 3;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  // uint64 sequence = 1;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sequence());
  }

  // uint64 totalSize = 2;
  if (this->totalsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->totalsize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void File::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:File)
  GOOGLE_DCHECK_NE(&from, this);
  const File* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const File>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:File)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:File)
    MergeFrom(*source);
  }
}

void File::MergeFrom(const File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
  if (from.totalsize() != 0) {
    set_totalsize(from.totalsize());
  }
}

void File::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void File::CopyFrom(const File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  return true;
}

void File::Swap(File* other) {
  if (other == this) return;
  InternalSwap(other);
}
void File::InternalSwap(File* other) {
  using std::swap;
  body_.Swap(&other->body_);
  swap(sequence_, other->sequence_);
  swap(totalsize_, other->totalsize_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata File::GetMetadata() const {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// File

// uint64 sequence = 1;
void File::clear_sequence() {
  sequence_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 File::sequence() const {
  // @@protoc_insertion_point(field_get:File.sequence)
  return sequence_;
}
void File::set_sequence(::google::protobuf::uint64 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:File.sequence)
}

// uint64 totalSize = 2;
void File::clear_totalsize() {
  totalsize_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 File::totalsize() const {
  // @@protoc_insertion_point(field_get:File.totalSize)
  return totalsize_;
}
void File::set_totalsize(::google::protobuf::uint64 value) {
  
  totalsize_ = value;
  // @@protoc_insertion_point(field_set:File.totalSize)
}

// bytes body = 3;
void File::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& File::body() const {
  // @@protoc_insertion_point(field_get:File.body)
  return body_.GetNoArena();
}
void File::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:File.body)
}
#if LANG_CXX11
void File::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:File.body)
}
#endif
void File::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:File.body)
}
void File::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:File.body)
}
::std::string* File::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:File.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* File::release_body() {
  // @@protoc_insertion_point(field_release:File.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void File::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:File.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Call::kKeyFieldNumber;
const int Call::kToFieldNumber;
const int Call::kFromFieldNumber;
const int Call::kAudioFieldNumber;
const int Call::kVideoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Call::Call()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_voip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Call)
}
Call::Call(const Call& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.to().size() > 0) {
    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from().size() > 0) {
    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  ::memcpy(&audio_, &from.audio_,
    static_cast<size_t>(reinterpret_cast<char*>(&video_) -
    reinterpret_cast<char*>(&audio_)) + sizeof(video_));
  // @@protoc_insertion_point(copy_constructor:Call)
}

void Call::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&audio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&video_) -
      reinterpret_cast<char*>(&audio_)) + sizeof(video_));
  _cached_size_ = 0;
}

Call::~Call() {
  // @@protoc_insertion_point(destructor:Call)
  SharedDtor();
}

void Call::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call::descriptor() {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Call& Call::default_instance() {
  protobuf_voip_2eproto::InitDefaults();
  return *internal_default_instance();
}

Call* Call::New(::google::protobuf::Arena* arena) const {
  Call* n = new Call;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Call::Clear() {
// @@protoc_insertion_point(message_clear_start:Call)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&audio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&video_) -
      reinterpret_cast<char*>(&audio_)) + sizeof(video_));
  _internal_metadata_.Clear();
}

bool Call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Call)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Call.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string to = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to().data(), static_cast<int>(this->to().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Call.to"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string from = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from().data(), static_cast<int>(this->from().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Call.from"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool audio = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &audio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool video = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &video_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Call)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Call)
  return false;
#undef DO_
}

void Call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Call)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Call.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string to = 2;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to().data(), static_cast<int>(this->to().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Call.to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->to(), output);
  }

  // string from = 3;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), static_cast<int>(this->from().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Call.from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from(), output);
  }

  // bool audio = 4;
  if (this->audio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->audio(), output);
  }

  // bool video = 5;
  if (this->video() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->video(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Call)
}

::google::protobuf::uint8* Call::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Call)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Call.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string to = 2;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to().data(), static_cast<int>(this->to().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Call.to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->to(), target);
  }

  // string from = 3;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), static_cast<int>(this->from().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Call.from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from(), target);
  }

  // bool audio = 4;
  if (this->audio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->audio(), target);
  }

  // bool video = 5;
  if (this->video() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->video(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Call)
  return target;
}

size_t Call::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Call)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string to = 2;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to());
  }

  // string from = 3;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from());
  }

  // bool audio = 4;
  if (this->audio() != 0) {
    total_size += 1 + 1;
  }

  // bool video = 5;
  if (this->video() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Call)
  GOOGLE_DCHECK_NE(&from, this);
  const Call* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Call>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Call)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Call)
    MergeFrom(*source);
  }
}

void Call::MergeFrom(const Call& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Call)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.to().size() > 0) {

    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.audio() != 0) {
    set_audio(from.audio());
  }
  if (from.video() != 0) {
    set_video(from.video());
  }
}

void Call::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Call)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call::CopyFrom(const Call& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Call)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call::IsInitialized() const {
  return true;
}

void Call::Swap(Call* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Call::InternalSwap(Call* other) {
  using std::swap;
  key_.Swap(&other->key_);
  to_.Swap(&other->to_);
  from_.Swap(&other->from_);
  swap(audio_, other->audio_);
  swap(video_, other->video_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Call::GetMetadata() const {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Call

// string key = 1;
void Call::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Call::key() const {
  // @@protoc_insertion_point(field_get:Call.key)
  return key_.GetNoArena();
}
void Call::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Call.key)
}
#if LANG_CXX11
void Call::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Call.key)
}
#endif
void Call::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Call.key)
}
void Call::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Call.key)
}
::std::string* Call::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:Call.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Call::release_key() {
  // @@protoc_insertion_point(field_release:Call.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Call::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:Call.key)
}

// string to = 2;
void Call::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Call::to() const {
  // @@protoc_insertion_point(field_get:Call.to)
  return to_.GetNoArena();
}
void Call::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Call.to)
}
#if LANG_CXX11
void Call::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Call.to)
}
#endif
void Call::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Call.to)
}
void Call::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Call.to)
}
::std::string* Call::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:Call.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Call::release_to() {
  // @@protoc_insertion_point(field_release:Call.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Call::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:Call.to)
}

// string from = 3;
void Call::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Call::from() const {
  // @@protoc_insertion_point(field_get:Call.from)
  return from_.GetNoArena();
}
void Call::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Call.from)
}
#if LANG_CXX11
void Call::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Call.from)
}
#endif
void Call::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Call.from)
}
void Call::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Call.from)
}
::std::string* Call::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:Call.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Call::release_from() {
  // @@protoc_insertion_point(field_release:Call.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Call::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:Call.from)
}

// bool audio = 4;
void Call::clear_audio() {
  audio_ = false;
}
bool Call::audio() const {
  // @@protoc_insertion_point(field_get:Call.audio)
  return audio_;
}
void Call::set_audio(bool value) {
  
  audio_ = value;
  // @@protoc_insertion_point(field_set:Call.audio)
}

// bool video = 5;
void Call::clear_video() {
  video_ = false;
}
bool Call::video() const {
  // @@protoc_insertion_point(field_get:Call.video)
  return video_;
}
void Call::set_video(bool value) {
  
  video_ = value;
  // @@protoc_insertion_point(field_set:Call.video)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Time::kValueFieldNumber;
const int Time::kScaleFieldNumber;
const int Time::kFlagsFieldNumber;
const int Time::kEpochFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Time::Time()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_voip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Time)
}
Time::Time(const Time& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&epoch_) -
    reinterpret_cast<char*>(&value_)) + sizeof(epoch_));
  // @@protoc_insertion_point(copy_constructor:Time)
}

void Time::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) -
      reinterpret_cast<char*>(&value_)) + sizeof(epoch_));
  _cached_size_ = 0;
}

Time::~Time() {
  // @@protoc_insertion_point(destructor:Time)
  SharedDtor();
}

void Time::SharedDtor() {
}

void Time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Time::descriptor() {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Time& Time::default_instance() {
  protobuf_voip_2eproto::InitDefaults();
  return *internal_default_instance();
}

Time* Time::New(::google::protobuf::Arena* arena) const {
  Time* n = new Time;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Time::Clear() {
// @@protoc_insertion_point(message_clear_start:Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) -
      reinterpret_cast<char*>(&value_)) + sizeof(epoch_));
  _internal_metadata_.Clear();
}

bool Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Time)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 scale = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 epoch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Time)
  return false;
#undef DO_
}

void Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }

  // int32 scale = 2;
  if (this->scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scale(), output);
  }

  // uint32 flags = 3;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // int64 epoch = 4;
  if (this->epoch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->epoch(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Time)
}

::google::protobuf::uint8* Time::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }

  // int32 scale = 2;
  if (this->scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scale(), target);
  }

  // uint32 flags = 3;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  // int64 epoch = 4;
  if (this->epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->epoch(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Time)
  return target;
}

size_t Time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Time)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->value());
  }

  // int32 scale = 2;
  if (this->scale() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scale());
  }

  // uint32 flags = 3;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  // int64 epoch = 4;
  if (this->epoch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->epoch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Time::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Time)
  GOOGLE_DCHECK_NE(&from, this);
  const Time* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Time>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Time)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Time)
    MergeFrom(*source);
  }
}

void Time::MergeFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Time)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.scale() != 0) {
    set_scale(from.scale());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.epoch() != 0) {
    set_epoch(from.epoch());
  }
}

void Time::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time::CopyFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {
  return true;
}

void Time::Swap(Time* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Time::InternalSwap(Time* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(scale_, other->scale_);
  swap(flags_, other->flags_);
  swap(epoch_, other->epoch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Time::GetMetadata() const {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Time

// int64 value = 1;
void Time::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Time::value() const {
  // @@protoc_insertion_point(field_get:Time.value)
  return value_;
}
void Time::set_value(::google::protobuf::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Time.value)
}

// int32 scale = 2;
void Time::clear_scale() {
  scale_ = 0;
}
::google::protobuf::int32 Time::scale() const {
  // @@protoc_insertion_point(field_get:Time.scale)
  return scale_;
}
void Time::set_scale(::google::protobuf::int32 value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:Time.scale)
}

// uint32 flags = 3;
void Time::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 Time::flags() const {
  // @@protoc_insertion_point(field_get:Time.flags)
  return flags_;
}
void Time::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:Time.flags)
}

// int64 epoch = 4;
void Time::clear_epoch() {
  epoch_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Time::epoch() const {
  // @@protoc_insertion_point(field_get:Time.epoch)
  return epoch_;
}
void Time::set_epoch(::google::protobuf::int64 value) {
  
  epoch_ = value;
  // @@protoc_insertion_point(field_set:Time.epoch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Timestamp::kDurationFieldNumber;
const int Timestamp::kPresentationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Timestamp::Timestamp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_voip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_duration()) {
    duration_ = new ::Time(*from.duration_);
  } else {
    duration_ = NULL;
  }
  if (from.has_presentation()) {
    presentation_ = new ::Time(*from.presentation_);
  } else {
    presentation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Timestamp)
}

void Timestamp::SharedCtor() {
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&presentation_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(presentation_));
  _cached_size_ = 0;
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:Timestamp)
  SharedDtor();
}

void Timestamp::SharedDtor() {
  if (this != internal_default_instance()) delete duration_;
  if (this != internal_default_instance()) delete presentation_;
}

void Timestamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Timestamp::descriptor() {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Timestamp& Timestamp::default_instance() {
  protobuf_voip_2eproto::InitDefaults();
  return *internal_default_instance();
}

Timestamp* Timestamp::New(::google::protobuf::Arena* arena) const {
  Timestamp* n = new Timestamp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:Timestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && duration_ != NULL) {
    delete duration_;
  }
  duration_ = NULL;
  if (GetArenaNoVirtual() == NULL && presentation_ != NULL) {
    delete presentation_;
  }
  presentation_ = NULL;
  _internal_metadata_.Clear();
}

bool Timestamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Timestamp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Time duration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Time presentation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_presentation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Timestamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Timestamp)
  return false;
#undef DO_
}

void Timestamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Timestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Time duration = 1;
  if (this->has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->duration_, output);
  }

  // .Time presentation = 2;
  if (this->has_presentation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->presentation_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Timestamp)
}

::google::protobuf::uint8* Timestamp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Timestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Time duration = 1;
  if (this->has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->duration_, deterministic, target);
  }

  // .Time presentation = 2;
  if (this->has_presentation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->presentation_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Timestamp)
  return target;
}

size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Timestamp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Time duration = 1;
  if (this->has_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->duration_);
  }

  // .Time presentation = 2;
  if (this->has_presentation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->presentation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Timestamp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  const Timestamp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Timestamp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Timestamp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Timestamp)
    MergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_duration()) {
    mutable_duration()->::Time::MergeFrom(from.duration());
  }
  if (from.has_presentation()) {
    mutable_presentation()->::Time::MergeFrom(from.presentation());
  }
}

void Timestamp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  return true;
}

void Timestamp::Swap(Timestamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Timestamp::InternalSwap(Timestamp* other) {
  using std::swap;
  swap(duration_, other->duration_);
  swap(presentation_, other->presentation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Timestamp::GetMetadata() const {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Timestamp

// .Time duration = 1;
bool Timestamp::has_duration() const {
  return this != internal_default_instance() && duration_ != NULL;
}
void Timestamp::clear_duration() {
  if (GetArenaNoVirtual() == NULL && duration_ != NULL) delete duration_;
  duration_ = NULL;
}
const ::Time& Timestamp::duration() const {
  const ::Time* p = duration_;
  // @@protoc_insertion_point(field_get:Timestamp.duration)
  return p != NULL ? *p : *reinterpret_cast<const ::Time*>(
      &::_Time_default_instance_);
}
::Time* Timestamp::mutable_duration() {
  
  if (duration_ == NULL) {
    duration_ = new ::Time;
  }
  // @@protoc_insertion_point(field_mutable:Timestamp.duration)
  return duration_;
}
::Time* Timestamp::release_duration() {
  // @@protoc_insertion_point(field_release:Timestamp.duration)
  
  ::Time* temp = duration_;
  duration_ = NULL;
  return temp;
}
void Timestamp::set_allocated_duration(::Time* duration) {
  delete duration_;
  duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Timestamp.duration)
}

// .Time presentation = 2;
bool Timestamp::has_presentation() const {
  return this != internal_default_instance() && presentation_ != NULL;
}
void Timestamp::clear_presentation() {
  if (GetArenaNoVirtual() == NULL && presentation_ != NULL) delete presentation_;
  presentation_ = NULL;
}
const ::Time& Timestamp::presentation() const {
  const ::Time* p = presentation_;
  // @@protoc_insertion_point(field_get:Timestamp.presentation)
  return p != NULL ? *p : *reinterpret_cast<const ::Time*>(
      &::_Time_default_instance_);
}
::Time* Timestamp::mutable_presentation() {
  
  if (presentation_ == NULL) {
    presentation_ = new ::Time;
  }
  // @@protoc_insertion_point(field_mutable:Timestamp.presentation)
  return presentation_;
}
::Time* Timestamp::release_presentation() {
  // @@protoc_insertion_point(field_release:Timestamp.presentation)
  
  ::Time* temp = presentation_;
  presentation_ = NULL;
  return temp;
}
void Timestamp::set_allocated_presentation(::Time* presentation) {
  delete presentation_;
  presentation_ = presentation;
  if (presentation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Timestamp.presentation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Image::Image_AttachmentsEntry::Image_AttachmentsEntry() {}
Image::Image_AttachmentsEntry::Image_AttachmentsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata Image::Image_AttachmentsEntry::GetMetadata() const {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[5];
}
void Image::Image_AttachmentsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void Image::Image_AttachmentsEntry::MergeFrom(const Image_AttachmentsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Image::kWidthFieldNumber;
const int Image::kHeightFieldNumber;
const int Image::kFormatFieldNumber;
const int Image::kAttachmentsFieldNumber;
const int Image::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Image::Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_voip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Image)
}
Image::Image(const Image& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attachments_.MergeFrom(from.attachments_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&width_)) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:Image)
}

void Image::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&width_)) + sizeof(format_));
  _cached_size_ = 0;
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:Image)
  SharedDtor();
}

void Image::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Image& Image::default_instance() {
  protobuf_voip_2eproto::InitDefaults();
  return *internal_default_instance();
}

Image* Image::New(::google::protobuf::Arena* arena) const {
  Image* n = new Image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attachments_.Clear();
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&width_)) + sizeof(format_));
  _internal_metadata_.Clear();
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 format = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &format_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> attachments = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          Image_AttachmentsEntry::Parser< ::google::protobuf::internal::MapField<
              Image_AttachmentsEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&attachments_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Image.AttachmentsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Image.AttachmentsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Image)
  return false;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->width(), output);
  }

  // int64 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->height(), output);
  }

  // uint32 format = 3;
  if (this->format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->format(), output);
  }

  // map<string, string> attachments = 4;
  if (!this->attachments().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Image.AttachmentsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Image.AttachmentsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->attachments().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attachments().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attachments().begin();
          it != this->attachments().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Image_AttachmentsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attachments_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Image_AttachmentsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attachments().begin();
          it != this->attachments().end(); ++it) {
        entry.reset(attachments_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Image)
}

::google::protobuf::uint8* Image::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 width = 1;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->width(), target);
  }

  // int64 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->height(), target);
  }

  // uint32 format = 3;
  if (this->format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->format(), target);
  }

  // map<string, string> attachments = 4;
  if (!this->attachments().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Image.AttachmentsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Image.AttachmentsEntry.value");
      }
    };

    if (deterministic &&
        this->attachments().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attachments().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attachments().begin();
          it != this->attachments().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Image_AttachmentsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attachments_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Image_AttachmentsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attachments().begin();
          it != this->attachments().end(); ++it) {
        entry.reset(attachments_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Image)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> attachments = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attachments_size());
  {
    ::google::protobuf::scoped_ptr<Image_AttachmentsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->attachments().begin();
        it != this->attachments().end(); ++it) {
      entry.reset(attachments_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int64 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->width());
  }

  // int64 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  // uint32 format = 3;
  if (this->format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->format());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Image>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Image)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attachments_.MergeFrom(from.attachments_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.format() != 0) {
    set_format(from.format());
  }
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::Swap(Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Image::InternalSwap(Image* other) {
  using std::swap;
  attachments_.Swap(&other->attachments_);
  data_.Swap(&other->data_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(format_, other->format_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Image

// int64 width = 1;
void Image::clear_width() {
  width_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Image::width() const {
  // @@protoc_insertion_point(field_get:Image.width)
  return width_;
}
void Image::set_width(::google::protobuf::int64 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:Image.width)
}

// int64 height = 2;
void Image::clear_height() {
  height_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Image::height() const {
  // @@protoc_insertion_point(field_get:Image.height)
  return height_;
}
void Image::set_height(::google::protobuf::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:Image.height)
}

// uint32 format = 3;
void Image::clear_format() {
  format_ = 0u;
}
::google::protobuf::uint32 Image::format() const {
  // @@protoc_insertion_point(field_get:Image.format)
  return format_;
}
void Image::set_format(::google::protobuf::uint32 value) {
  
  format_ = value;
  // @@protoc_insertion_point(field_set:Image.format)
}

// map<string, string> attachments = 4;
int Image::attachments_size() const {
  return attachments_.size();
}
void Image::clear_attachments() {
  attachments_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Image::attachments() const {
  // @@protoc_insertion_point(field_map:Image.attachments)
  return attachments_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Image::mutable_attachments() {
  // @@protoc_insertion_point(field_mutable_map:Image.attachments)
  return attachments_.MutableMap();
}

// bytes data = 5;
void Image::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:Image.data)
  return data_.GetNoArena();
}
void Image::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Image.data)
}
#if LANG_CXX11
void Image::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Image.data)
}
#endif
void Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Image.data)
}
void Image::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Image.data)
}
::std::string* Image::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Image.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:Image.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Image::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Image.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

FormatDescription::FormatDescription_ExtensionsEntry::FormatDescription_ExtensionsEntry() {}
FormatDescription::FormatDescription_ExtensionsEntry::FormatDescription_ExtensionsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata FormatDescription::FormatDescription_ExtensionsEntry::GetMetadata() const {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[7];
}
void FormatDescription::FormatDescription_ExtensionsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void FormatDescription::FormatDescription_ExtensionsEntry::MergeFrom(const FormatDescription_ExtensionsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FormatDescription::kMediaTypeFieldNumber;
const int FormatDescription::kMediaSubtypeFieldNumber;
const int FormatDescription::kExtensionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FormatDescription::FormatDescription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_voip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FormatDescription)
}
FormatDescription::FormatDescription(const FormatDescription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extensions_.MergeFrom(from.extensions_);
  ::memcpy(&mediatype_, &from.mediatype_,
    static_cast<size_t>(reinterpret_cast<char*>(&mediasubtype_) -
    reinterpret_cast<char*>(&mediatype_)) + sizeof(mediasubtype_));
  // @@protoc_insertion_point(copy_constructor:FormatDescription)
}

void FormatDescription::SharedCtor() {
  ::memset(&mediatype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mediasubtype_) -
      reinterpret_cast<char*>(&mediatype_)) + sizeof(mediasubtype_));
  _cached_size_ = 0;
}

FormatDescription::~FormatDescription() {
  // @@protoc_insertion_point(destructor:FormatDescription)
  SharedDtor();
}

void FormatDescription::SharedDtor() {
}

void FormatDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FormatDescription::descriptor() {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FormatDescription& FormatDescription::default_instance() {
  protobuf_voip_2eproto::InitDefaults();
  return *internal_default_instance();
}

FormatDescription* FormatDescription::New(::google::protobuf::Arena* arena) const {
  FormatDescription* n = new FormatDescription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FormatDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:FormatDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extensions_.Clear();
  ::memset(&mediatype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mediasubtype_) -
      reinterpret_cast<char*>(&mediatype_)) + sizeof(mediasubtype_));
  _internal_metadata_.Clear();
}

bool FormatDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FormatDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 mediaType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mediatype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mediaSubtype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mediasubtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> extensions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          FormatDescription_ExtensionsEntry::Parser< ::google::protobuf::internal::MapField<
              FormatDescription_ExtensionsEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&extensions_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FormatDescription.ExtensionsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FormatDescription.ExtensionsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FormatDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FormatDescription)
  return false;
#undef DO_
}

void FormatDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FormatDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mediaType = 1;
  if (this->mediatype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mediatype(), output);
  }

  // uint32 mediaSubtype = 2;
  if (this->mediasubtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mediasubtype(), output);
  }

  // map<string, string> extensions = 3;
  if (!this->extensions().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "FormatDescription.ExtensionsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "FormatDescription.ExtensionsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->extensions().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->extensions().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->extensions().begin();
          it != this->extensions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<FormatDescription_ExtensionsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(extensions_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<FormatDescription_ExtensionsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->extensions().begin();
          it != this->extensions().end(); ++it) {
        entry.reset(extensions_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:FormatDescription)
}

::google::protobuf::uint8* FormatDescription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FormatDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mediaType = 1;
  if (this->mediatype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mediatype(), target);
  }

  // uint32 mediaSubtype = 2;
  if (this->mediasubtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mediasubtype(), target);
  }

  // map<string, string> extensions = 3;
  if (!this->extensions().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "FormatDescription.ExtensionsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "FormatDescription.ExtensionsEntry.value");
      }
    };

    if (deterministic &&
        this->extensions().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->extensions().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->extensions().begin();
          it != this->extensions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<FormatDescription_ExtensionsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(extensions_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<FormatDescription_ExtensionsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->extensions().begin();
          it != this->extensions().end(); ++it) {
        entry.reset(extensions_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FormatDescription)
  return target;
}

size_t FormatDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FormatDescription)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> extensions = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->extensions_size());
  {
    ::google::protobuf::scoped_ptr<FormatDescription_ExtensionsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->extensions().begin();
        it != this->extensions().end(); ++it) {
      entry.reset(extensions_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 mediaType = 1;
  if (this->mediatype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mediatype());
  }

  // uint32 mediaSubtype = 2;
  if (this->mediasubtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mediasubtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormatDescription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FormatDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const FormatDescription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FormatDescription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FormatDescription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FormatDescription)
    MergeFrom(*source);
  }
}

void FormatDescription::MergeFrom(const FormatDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FormatDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extensions_.MergeFrom(from.extensions_);
  if (from.mediatype() != 0) {
    set_mediatype(from.mediatype());
  }
  if (from.mediasubtype() != 0) {
    set_mediasubtype(from.mediasubtype());
  }
}

void FormatDescription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FormatDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormatDescription::CopyFrom(const FormatDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FormatDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormatDescription::IsInitialized() const {
  return true;
}

void FormatDescription::Swap(FormatDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FormatDescription::InternalSwap(FormatDescription* other) {
  using std::swap;
  extensions_.Swap(&other->extensions_);
  swap(mediatype_, other->mediatype_);
  swap(mediasubtype_, other->mediasubtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FormatDescription::GetMetadata() const {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FormatDescription

// uint32 mediaType = 1;
void FormatDescription::clear_mediatype() {
  mediatype_ = 0u;
}
::google::protobuf::uint32 FormatDescription::mediatype() const {
  // @@protoc_insertion_point(field_get:FormatDescription.mediaType)
  return mediatype_;
}
void FormatDescription::set_mediatype(::google::protobuf::uint32 value) {
  
  mediatype_ = value;
  // @@protoc_insertion_point(field_set:FormatDescription.mediaType)
}

// uint32 mediaSubtype = 2;
void FormatDescription::clear_mediasubtype() {
  mediasubtype_ = 0u;
}
::google::protobuf::uint32 FormatDescription::mediasubtype() const {
  // @@protoc_insertion_point(field_get:FormatDescription.mediaSubtype)
  return mediasubtype_;
}
void FormatDescription::set_mediasubtype(::google::protobuf::uint32 value) {
  
  mediasubtype_ = value;
  // @@protoc_insertion_point(field_set:FormatDescription.mediaSubtype)
}

// map<string, string> extensions = 3;
int FormatDescription::extensions_size() const {
  return extensions_.size();
}
void FormatDescription::clear_extensions() {
  extensions_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
FormatDescription::extensions() const {
  // @@protoc_insertion_point(field_map:FormatDescription.extensions)
  return extensions_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
FormatDescription::mutable_extensions() {
  // @@protoc_insertion_point(field_mutable_map:FormatDescription.extensions)
  return extensions_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoSample::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoSample::VideoSample()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_voip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:VideoSample)
}
VideoSample::VideoSample(const VideoSample& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_image()) {
    image_ = new ::Image(*from.image_);
  } else {
    image_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:VideoSample)
}

void VideoSample::SharedCtor() {
  image_ = NULL;
  _cached_size_ = 0;
}

VideoSample::~VideoSample() {
  // @@protoc_insertion_point(destructor:VideoSample)
  SharedDtor();
}

void VideoSample::SharedDtor() {
  if (this != internal_default_instance()) delete image_;
}

void VideoSample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoSample::descriptor() {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoSample& VideoSample::default_instance() {
  protobuf_voip_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoSample* VideoSample::New(::google::protobuf::Arena* arena) const {
  VideoSample* n = new VideoSample;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoSample::Clear() {
// @@protoc_insertion_point(message_clear_start:VideoSample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && image_ != NULL) {
    delete image_;
  }
  image_ = NULL;
  _internal_metadata_.Clear();
}

bool VideoSample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VideoSample)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Image image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VideoSample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VideoSample)
  return false;
#undef DO_
}

void VideoSample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VideoSample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Image image = 1;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->image_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:VideoSample)
}

::google::protobuf::uint8* VideoSample::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:VideoSample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Image image = 1;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->image_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VideoSample)
  return target;
}

size_t VideoSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VideoSample)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Image image = 1;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoSample::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VideoSample)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoSample* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoSample>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VideoSample)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VideoSample)
    MergeFrom(*source);
  }
}

void VideoSample::MergeFrom(const VideoSample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VideoSample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_image()) {
    mutable_image()->::Image::MergeFrom(from.image());
  }
}

void VideoSample::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VideoSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoSample::CopyFrom(const VideoSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VideoSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSample::IsInitialized() const {
  return true;
}

void VideoSample::Swap(VideoSample* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoSample::InternalSwap(VideoSample* other) {
  using std::swap;
  swap(image_, other->image_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoSample::GetMetadata() const {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoSample

// .Image image = 1;
bool VideoSample::has_image() const {
  return this != internal_default_instance() && image_ != NULL;
}
void VideoSample::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::Image& VideoSample::image() const {
  const ::Image* p = image_;
  // @@protoc_insertion_point(field_get:VideoSample.image)
  return p != NULL ? *p : *reinterpret_cast<const ::Image*>(
      &::_Image_default_instance_);
}
::Image* VideoSample::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::Image;
  }
  // @@protoc_insertion_point(field_mutable:VideoSample.image)
  return image_;
}
::Image* VideoSample::release_image() {
  // @@protoc_insertion_point(field_release:VideoSample.image)
  
  ::Image* temp = image_;
  image_ = NULL;
  return temp;
}
void VideoSample::set_allocated_image(::Image* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:VideoSample.image)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioSample::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioSample::AudioSample()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_voip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AudioSample)
}
AudioSample::AudioSample(const AudioSample& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_image()) {
    image_ = new ::Image(*from.image_);
  } else {
    image_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:AudioSample)
}

void AudioSample::SharedCtor() {
  image_ = NULL;
  _cached_size_ = 0;
}

AudioSample::~AudioSample() {
  // @@protoc_insertion_point(destructor:AudioSample)
  SharedDtor();
}

void AudioSample::SharedDtor() {
  if (this != internal_default_instance()) delete image_;
}

void AudioSample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioSample::descriptor() {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AudioSample& AudioSample::default_instance() {
  protobuf_voip_2eproto::InitDefaults();
  return *internal_default_instance();
}

AudioSample* AudioSample::New(::google::protobuf::Arena* arena) const {
  AudioSample* n = new AudioSample;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioSample::Clear() {
// @@protoc_insertion_point(message_clear_start:AudioSample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && image_ != NULL) {
    delete image_;
  }
  image_ = NULL;
  _internal_metadata_.Clear();
}

bool AudioSample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AudioSample)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Image image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AudioSample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AudioSample)
  return false;
#undef DO_
}

void AudioSample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AudioSample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Image image = 1;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->image_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AudioSample)
}

::google::protobuf::uint8* AudioSample::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AudioSample)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Image image = 1;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->image_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AudioSample)
  return target;
}

size_t AudioSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AudioSample)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Image image = 1;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioSample::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AudioSample)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioSample* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AudioSample>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AudioSample)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AudioSample)
    MergeFrom(*source);
  }
}

void AudioSample::MergeFrom(const AudioSample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AudioSample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_image()) {
    mutable_image()->::Image::MergeFrom(from.image());
  }
}

void AudioSample::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AudioSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioSample::CopyFrom(const AudioSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AudioSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioSample::IsInitialized() const {
  return true;
}

void AudioSample::Swap(AudioSample* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioSample::InternalSwap(AudioSample* other) {
  using std::swap;
  swap(image_, other->image_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AudioSample::GetMetadata() const {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioSample

// .Image image = 1;
bool AudioSample::has_image() const {
  return this != internal_default_instance() && image_ != NULL;
}
void AudioSample::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::Image& AudioSample::image() const {
  const ::Image* p = image_;
  // @@protoc_insertion_point(field_get:AudioSample.image)
  return p != NULL ? *p : *reinterpret_cast<const ::Image*>(
      &::_Image_default_instance_);
}
::Image* AudioSample::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::Image;
  }
  // @@protoc_insertion_point(field_mutable:AudioSample.image)
  return image_;
}
::Image* AudioSample::release_image() {
  // @@protoc_insertion_point(field_release:AudioSample.image)
  
  ::Image* temp = image_;
  image_ = NULL;
  return temp;
}
void AudioSample::set_allocated_image(::Image* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:AudioSample.image)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Av::kVideoFieldNumber;
const int Av::kAudioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Av::Av()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_voip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Av)
}
Av::Av(const Av& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_video()) {
    video_ = new ::VideoSample(*from.video_);
  } else {
    video_ = NULL;
  }
  if (from.has_audio()) {
    audio_ = new ::AudioSample(*from.audio_);
  } else {
    audio_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Av)
}

void Av::SharedCtor() {
  ::memset(&video_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_) -
      reinterpret_cast<char*>(&video_)) + sizeof(audio_));
  _cached_size_ = 0;
}

Av::~Av() {
  // @@protoc_insertion_point(destructor:Av)
  SharedDtor();
}

void Av::SharedDtor() {
  if (this != internal_default_instance()) delete video_;
  if (this != internal_default_instance()) delete audio_;
}

void Av::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Av::descriptor() {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Av& Av::default_instance() {
  protobuf_voip_2eproto::InitDefaults();
  return *internal_default_instance();
}

Av* Av::New(::google::protobuf::Arena* arena) const {
  Av* n = new Av;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Av::Clear() {
// @@protoc_insertion_point(message_clear_start:Av)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && video_ != NULL) {
    delete video_;
  }
  video_ = NULL;
  if (GetArenaNoVirtual() == NULL && audio_ != NULL) {
    delete audio_;
  }
  audio_ = NULL;
  _internal_metadata_.Clear();
}

bool Av::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Av)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VideoSample video = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AudioSample audio = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Av)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Av)
  return false;
#undef DO_
}

void Av::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Av)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VideoSample video = 1;
  if (this->has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->video_, output);
  }

  // .AudioSample audio = 2;
  if (this->has_audio()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->audio_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Av)
}

::google::protobuf::uint8* Av::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Av)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VideoSample video = 1;
  if (this->has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->video_, deterministic, target);
  }

  // .AudioSample audio = 2;
  if (this->has_audio()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->audio_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Av)
  return target;
}

size_t Av::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Av)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .VideoSample video = 1;
  if (this->has_video()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->video_);
  }

  // .AudioSample audio = 2;
  if (this->has_audio()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->audio_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Av::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Av)
  GOOGLE_DCHECK_NE(&from, this);
  const Av* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Av>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Av)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Av)
    MergeFrom(*source);
  }
}

void Av::MergeFrom(const Av& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Av)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_video()) {
    mutable_video()->::VideoSample::MergeFrom(from.video());
  }
  if (from.has_audio()) {
    mutable_audio()->::AudioSample::MergeFrom(from.audio());
  }
}

void Av::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Av)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Av::CopyFrom(const Av& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Av)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Av::IsInitialized() const {
  return true;
}

void Av::Swap(Av* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Av::InternalSwap(Av* other) {
  using std::swap;
  swap(video_, other->video_);
  swap(audio_, other->audio_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Av::GetMetadata() const {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Av

// .VideoSample video = 1;
bool Av::has_video() const {
  return this != internal_default_instance() && video_ != NULL;
}
void Av::clear_video() {
  if (GetArenaNoVirtual() == NULL && video_ != NULL) delete video_;
  video_ = NULL;
}
const ::VideoSample& Av::video() const {
  const ::VideoSample* p = video_;
  // @@protoc_insertion_point(field_get:Av.video)
  return p != NULL ? *p : *reinterpret_cast<const ::VideoSample*>(
      &::_VideoSample_default_instance_);
}
::VideoSample* Av::mutable_video() {
  
  if (video_ == NULL) {
    video_ = new ::VideoSample;
  }
  // @@protoc_insertion_point(field_mutable:Av.video)
  return video_;
}
::VideoSample* Av::release_video() {
  // @@protoc_insertion_point(field_release:Av.video)
  
  ::VideoSample* temp = video_;
  video_ = NULL;
  return temp;
}
void Av::set_allocated_video(::VideoSample* video) {
  delete video_;
  video_ = video;
  if (video) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Av.video)
}

// .AudioSample audio = 2;
bool Av::has_audio() const {
  return this != internal_default_instance() && audio_ != NULL;
}
void Av::clear_audio() {
  if (GetArenaNoVirtual() == NULL && audio_ != NULL) delete audio_;
  audio_ = NULL;
}
const ::AudioSample& Av::audio() const {
  const ::AudioSample* p = audio_;
  // @@protoc_insertion_point(field_get:Av.audio)
  return p != NULL ? *p : *reinterpret_cast<const ::AudioSample*>(
      &::_AudioSample_default_instance_);
}
::AudioSample* Av::mutable_audio() {
  
  if (audio_ == NULL) {
    audio_ = new ::AudioSample;
  }
  // @@protoc_insertion_point(field_mutable:Av.audio)
  return audio_;
}
::AudioSample* Av::release_audio() {
  // @@protoc_insertion_point(field_release:Av.audio)
  
  ::AudioSample* temp = audio_;
  audio_ = NULL;
  return temp;
}
void Av::set_allocated_audio(::AudioSample* audio) {
  delete audio_;
  audio_ = audio;
  if (audio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Av.audio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AVSession::kSidFieldNumber;
const int AVSession::kGidFieldNumber;
const int AVSession::kActiveFieldNumber;
const int AVSession::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AVSession::AVSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_voip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AVSession)
}
AVSession::AVSession(const AVSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sid().size() > 0) {
    sid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sid_);
  }
  gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gid().size() > 0) {
    gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gid_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  active_ = from.active_;
  // @@protoc_insertion_point(copy_constructor:AVSession)
}

void AVSession::SharedCtor() {
  sid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  active_ = false;
  _cached_size_ = 0;
}

AVSession::~AVSession() {
  // @@protoc_insertion_point(destructor:AVSession)
  SharedDtor();
}

void AVSession::SharedDtor() {
  sid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AVSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AVSession::descriptor() {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AVSession& AVSession::default_instance() {
  protobuf_voip_2eproto::InitDefaults();
  return *internal_default_instance();
}

AVSession* AVSession::New(::google::protobuf::Arena* arena) const {
  AVSession* n = new AVSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AVSession::Clear() {
// @@protoc_insertion_point(message_clear_start:AVSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  active_ = false;
  _internal_metadata_.Clear();
}

bool AVSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AVSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sid().data(), static_cast<int>(this->sid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AVSession.sid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gid().data(), static_cast<int>(this->gid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AVSession.gid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool active = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AVSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AVSession)
  return false;
#undef DO_
}

void AVSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AVSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sid = 1;
  if (this->sid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sid().data(), static_cast<int>(this->sid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AVSession.sid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sid(), output);
  }

  // string gid = 2;
  if (this->gid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gid().data(), static_cast<int>(this->gid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AVSession.gid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gid(), output);
  }

  // bool active = 3;
  if (this->active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->active(), output);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AVSession)
}

::google::protobuf::uint8* AVSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AVSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sid = 1;
  if (this->sid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sid().data(), static_cast<int>(this->sid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AVSession.sid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sid(), target);
  }

  // string gid = 2;
  if (this->gid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gid().data(), static_cast<int>(this->gid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AVSession.gid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gid(), target);
  }

  // bool active = 3;
  if (this->active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->active(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AVSession)
  return target;
}

size_t AVSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AVSession)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sid = 1;
  if (this->sid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sid());
  }

  // string gid = 2;
  if (this->gid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gid());
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // bool active = 3;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AVSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AVSession)
  GOOGLE_DCHECK_NE(&from, this);
  const AVSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AVSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AVSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AVSession)
    MergeFrom(*source);
  }
}

void AVSession::MergeFrom(const AVSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AVSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sid().size() > 0) {

    sid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sid_);
  }
  if (from.gid().size() > 0) {

    gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gid_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.active() != 0) {
    set_active(from.active());
  }
}

void AVSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AVSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AVSession::CopyFrom(const AVSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AVSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AVSession::IsInitialized() const {
  return true;
}

void AVSession::Swap(AVSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AVSession::InternalSwap(AVSession* other) {
  using std::swap;
  sid_.Swap(&other->sid_);
  gid_.Swap(&other->gid_);
  data_.Swap(&other->data_);
  swap(active_, other->active_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AVSession::GetMetadata() const {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AVSession

// string sid = 1;
void AVSession::clear_sid() {
  sid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AVSession::sid() const {
  // @@protoc_insertion_point(field_get:AVSession.sid)
  return sid_.GetNoArena();
}
void AVSession::set_sid(const ::std::string& value) {
  
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AVSession.sid)
}
#if LANG_CXX11
void AVSession::set_sid(::std::string&& value) {
  
  sid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AVSession.sid)
}
#endif
void AVSession::set_sid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AVSession.sid)
}
void AVSession::set_sid(const char* value, size_t size) {
  
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AVSession.sid)
}
::std::string* AVSession::mutable_sid() {
  
  // @@protoc_insertion_point(field_mutable:AVSession.sid)
  return sid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AVSession::release_sid() {
  // @@protoc_insertion_point(field_release:AVSession.sid)
  
  return sid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AVSession::set_allocated_sid(::std::string* sid) {
  if (sid != NULL) {
    
  } else {
    
  }
  sid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sid);
  // @@protoc_insertion_point(field_set_allocated:AVSession.sid)
}

// string gid = 2;
void AVSession::clear_gid() {
  gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AVSession::gid() const {
  // @@protoc_insertion_point(field_get:AVSession.gid)
  return gid_.GetNoArena();
}
void AVSession::set_gid(const ::std::string& value) {
  
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AVSession.gid)
}
#if LANG_CXX11
void AVSession::set_gid(::std::string&& value) {
  
  gid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AVSession.gid)
}
#endif
void AVSession::set_gid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AVSession.gid)
}
void AVSession::set_gid(const char* value, size_t size) {
  
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AVSession.gid)
}
::std::string* AVSession::mutable_gid() {
  
  // @@protoc_insertion_point(field_mutable:AVSession.gid)
  return gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AVSession::release_gid() {
  // @@protoc_insertion_point(field_release:AVSession.gid)
  
  return gid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AVSession::set_allocated_gid(::std::string* gid) {
  if (gid != NULL) {
    
  } else {
    
  }
  gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gid);
  // @@protoc_insertion_point(field_set_allocated:AVSession.gid)
}

// bool active = 3;
void AVSession::clear_active() {
  active_ = false;
}
bool AVSession::active() const {
  // @@protoc_insertion_point(field_get:AVSession.active)
  return active_;
}
void AVSession::set_active(bool value) {
  
  active_ = value;
  // @@protoc_insertion_point(field_set:AVSession.active)
}

// bytes data = 4;
void AVSession::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AVSession::data() const {
  // @@protoc_insertion_point(field_get:AVSession.data)
  return data_.GetNoArena();
}
void AVSession::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AVSession.data)
}
#if LANG_CXX11
void AVSession::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AVSession.data)
}
#endif
void AVSession::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AVSession.data)
}
void AVSession::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AVSession.data)
}
::std::string* AVSession::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:AVSession.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AVSession::release_data() {
  // @@protoc_insertion_point(field_release:AVSession.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AVSession::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:AVSession.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AVQuality::kDiffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AVQuality::AVQuality()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_voip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AVQuality)
}
AVQuality::AVQuality(const AVQuality& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diff_ = from.diff_;
  // @@protoc_insertion_point(copy_constructor:AVQuality)
}

void AVQuality::SharedCtor() {
  diff_ = 0;
  _cached_size_ = 0;
}

AVQuality::~AVQuality() {
  // @@protoc_insertion_point(destructor:AVQuality)
  SharedDtor();
}

void AVQuality::SharedDtor() {
}

void AVQuality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AVQuality::descriptor() {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AVQuality& AVQuality::default_instance() {
  protobuf_voip_2eproto::InitDefaults();
  return *internal_default_instance();
}

AVQuality* AVQuality::New(::google::protobuf::Arena* arena) const {
  AVQuality* n = new AVQuality;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AVQuality::Clear() {
// @@protoc_insertion_point(message_clear_start:AVQuality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diff_ = 0;
  _internal_metadata_.Clear();
}

bool AVQuality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AVQuality)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 diff = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AVQuality)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AVQuality)
  return false;
#undef DO_
}

void AVQuality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AVQuality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 diff = 1;
  if (this->diff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->diff(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AVQuality)
}

::google::protobuf::uint8* AVQuality::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AVQuality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 diff = 1;
  if (this->diff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->diff(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AVQuality)
  return target;
}

size_t AVQuality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AVQuality)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 diff = 1;
  if (this->diff() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->diff());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AVQuality::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AVQuality)
  GOOGLE_DCHECK_NE(&from, this);
  const AVQuality* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AVQuality>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AVQuality)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AVQuality)
    MergeFrom(*source);
  }
}

void AVQuality::MergeFrom(const AVQuality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AVQuality)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.diff() != 0) {
    set_diff(from.diff());
  }
}

void AVQuality::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AVQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AVQuality::CopyFrom(const AVQuality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AVQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AVQuality::IsInitialized() const {
  return true;
}

void AVQuality::Swap(AVQuality* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AVQuality::InternalSwap(AVQuality* other) {
  using std::swap;
  swap(diff_, other->diff_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AVQuality::GetMetadata() const {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AVQuality

// int32 diff = 1;
void AVQuality::clear_diff() {
  diff_ = 0;
}
::google::protobuf::int32 AVQuality::diff() const {
  // @@protoc_insertion_point(field_get:AVQuality.diff)
  return diff_;
}
void AVQuality::set_diff(::google::protobuf::int32 value) {
  
  diff_ = value;
  // @@protoc_insertion_point(field_set:AVQuality.diff)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Voip::kVersionFieldNumber;
const int Voip::kWhichFieldNumber;
const int Voip::kTextStorageFieldNumber;
const int Voip::kFileFieldNumber;
const int Voip::kPayloadFieldNumber;
const int Voip::kCallFieldNumber;
const int Voip::kAvFieldNumber;
const int Voip::kAudioSessionFieldNumber;
const int Voip::kVideoSessionFieldNumber;
const int Voip::kAvQualityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Voip::Voip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_voip_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Voip)
}
Voip::Voip(const Voip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      textstorage_(from.textstorage_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.payload().size() > 0) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  if (from.has_avquality()) {
    avquality_ = new ::AVQuality(*from.avquality_);
  } else {
    avquality_ = NULL;
  }
  if (from.has_file()) {
    file_ = new ::File(*from.file_);
  } else {
    file_ = NULL;
  }
  if (from.has_call()) {
    call_ = new ::Call(*from.call_);
  } else {
    call_ = NULL;
  }
  if (from.has_av()) {
    av_ = new ::Av(*from.av_);
  } else {
    av_ = NULL;
  }
  if (from.has_audiosession()) {
    audiosession_ = new ::AVSession(*from.audiosession_);
  } else {
    audiosession_ = NULL;
  }
  if (from.has_videosession()) {
    videosession_ = new ::AVSession(*from.videosession_);
  } else {
    videosession_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&which_) -
    reinterpret_cast<char*>(&version_)) + sizeof(which_));
  // @@protoc_insertion_point(copy_constructor:Voip)
}

void Voip::SharedCtor() {
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&avquality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&which_) -
      reinterpret_cast<char*>(&avquality_)) + sizeof(which_));
  _cached_size_ = 0;
}

Voip::~Voip() {
  // @@protoc_insertion_point(destructor:Voip)
  SharedDtor();
}

void Voip::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete avquality_;
  if (this != internal_default_instance()) delete file_;
  if (this != internal_default_instance()) delete call_;
  if (this != internal_default_instance()) delete av_;
  if (this != internal_default_instance()) delete audiosession_;
  if (this != internal_default_instance()) delete videosession_;
}

void Voip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Voip::descriptor() {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Voip& Voip::default_instance() {
  protobuf_voip_2eproto::InitDefaults();
  return *internal_default_instance();
}

Voip* Voip::New(::google::protobuf::Arena* arena) const {
  Voip* n = new Voip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Voip::Clear() {
// @@protoc_insertion_point(message_clear_start:Voip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  textstorage_.Clear();
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && avquality_ != NULL) {
    delete avquality_;
  }
  avquality_ = NULL;
  if (GetArenaNoVirtual() == NULL && file_ != NULL) {
    delete file_;
  }
  file_ = NULL;
  if (GetArenaNoVirtual() == NULL && call_ != NULL) {
    delete call_;
  }
  call_ = NULL;
  if (GetArenaNoVirtual() == NULL && av_ != NULL) {
    delete av_;
  }
  av_ = NULL;
  if (GetArenaNoVirtual() == NULL && audiosession_ != NULL) {
    delete audiosession_;
  }
  audiosession_ = NULL;
  if (GetArenaNoVirtual() == NULL && videosession_ != NULL) {
    delete videosession_;
  }
  videosession_ = NULL;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&which_) -
      reinterpret_cast<char*>(&version_)) + sizeof(which_));
  _internal_metadata_.Clear();
}

bool Voip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Voip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Voip.Which which = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_which(static_cast< ::Voip_Which >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AVQuality avQuality = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avquality()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Text textStorage = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_textstorage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .File file = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 818 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes payload = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 826 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Call call = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 834 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Av av = 105;
      case 105: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 842 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_av()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AVSession audioSession = 106;
      case 106: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 850 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audiosession()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AVSession videoSession = 107;
      case 107: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 858 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_videosession()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Voip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Voip)
  return false;
#undef DO_
}

void Voip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Voip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // .Voip.Which which = 12;
  if (this->which() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->which(), output);
  }

  // .AVQuality avQuality = 18;
  if (this->has_avquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->avquality_, output);
  }

  // repeated .Text textStorage = 101;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->textstorage_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->textstorage(static_cast<int>(i)), output);
  }

  // .File file = 102;
  if (this->has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, *this->file_, output);
  }

  // bytes payload = 103;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      103, this->payload(), output);
  }

  // .Call call = 104;
  if (this->has_call()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, *this->call_, output);
  }

  // .Av av = 105;
  if (this->has_av()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, *this->av_, output);
  }

  // .AVSession audioSession = 106;
  if (this->has_audiosession()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, *this->audiosession_, output);
  }

  // .AVSession videoSession = 107;
  if (this->has_videosession()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, *this->videosession_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Voip)
}

::google::protobuf::uint8* Voip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Voip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // .Voip.Which which = 12;
  if (this->which() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->which(), target);
  }

  // .AVQuality avQuality = 18;
  if (this->has_avquality()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->avquality_, deterministic, target);
  }

  // repeated .Text textStorage = 101;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->textstorage_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        101, this->textstorage(static_cast<int>(i)), deterministic, target);
  }

  // .File file = 102;
  if (this->has_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        102, *this->file_, deterministic, target);
  }

  // bytes payload = 103;
  if (this->payload().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        103, this->payload(), target);
  }

  // .Call call = 104;
  if (this->has_call()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        104, *this->call_, deterministic, target);
  }

  // .Av av = 105;
  if (this->has_av()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        105, *this->av_, deterministic, target);
  }

  // .AVSession audioSession = 106;
  if (this->has_audiosession()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        106, *this->audiosession_, deterministic, target);
  }

  // .AVSession videoSession = 107;
  if (this->has_videosession()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        107, *this->videosession_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Voip)
  return target;
}

size_t Voip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Voip)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Text textStorage = 101;
  {
    unsigned int count = static_cast<unsigned int>(this->textstorage_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->textstorage(static_cast<int>(i)));
    }
  }

  // bytes payload = 103;
  if (this->payload().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  // .AVQuality avQuality = 18;
  if (this->has_avquality()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->avquality_);
  }

  // .File file = 102;
  if (this->has_file()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->file_);
  }

  // .Call call = 104;
  if (this->has_call()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->call_);
  }

  // .Av av = 105;
  if (this->has_av()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->av_);
  }

  // .AVSession audioSession = 106;
  if (this->has_audiosession()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->audiosession_);
  }

  // .AVSession videoSession = 107;
  if (this->has_videosession()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->videosession_);
  }

  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // .Voip.Which which = 12;
  if (this->which() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->which());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Voip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Voip)
  GOOGLE_DCHECK_NE(&from, this);
  const Voip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Voip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Voip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Voip)
    MergeFrom(*source);
  }
}

void Voip::MergeFrom(const Voip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Voip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  textstorage_.MergeFrom(from.textstorage_);
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  if (from.has_avquality()) {
    mutable_avquality()->::AVQuality::MergeFrom(from.avquality());
  }
  if (from.has_file()) {
    mutable_file()->::File::MergeFrom(from.file());
  }
  if (from.has_call()) {
    mutable_call()->::Call::MergeFrom(from.call());
  }
  if (from.has_av()) {
    mutable_av()->::Av::MergeFrom(from.av());
  }
  if (from.has_audiosession()) {
    mutable_audiosession()->::AVSession::MergeFrom(from.audiosession());
  }
  if (from.has_videosession()) {
    mutable_videosession()->::AVSession::MergeFrom(from.videosession());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.which() != 0) {
    set_which(from.which());
  }
}

void Voip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Voip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Voip::CopyFrom(const Voip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Voip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Voip::IsInitialized() const {
  return true;
}

void Voip::Swap(Voip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Voip::InternalSwap(Voip* other) {
  using std::swap;
  textstorage_.InternalSwap(&other->textstorage_);
  payload_.Swap(&other->payload_);
  swap(avquality_, other->avquality_);
  swap(file_, other->file_);
  swap(call_, other->call_);
  swap(av_, other->av_);
  swap(audiosession_, other->audiosession_);
  swap(videosession_, other->videosession_);
  swap(version_, other->version_);
  swap(which_, other->which_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Voip::GetMetadata() const {
  protobuf_voip_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_voip_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Voip

// uint32 version = 1;
void Voip::clear_version() {
  version_ = 0u;
}
::google::protobuf::uint32 Voip::version() const {
  // @@protoc_insertion_point(field_get:Voip.version)
  return version_;
}
void Voip::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:Voip.version)
}

// .Voip.Which which = 12;
void Voip::clear_which() {
  which_ = 0;
}
::Voip_Which Voip::which() const {
  // @@protoc_insertion_point(field_get:Voip.which)
  return static_cast< ::Voip_Which >(which_);
}
void Voip::set_which(::Voip_Which value) {
  
  which_ = value;
  // @@protoc_insertion_point(field_set:Voip.which)
}

// repeated .Text textStorage = 101;
int Voip::textstorage_size() const {
  return textstorage_.size();
}
void Voip::clear_textstorage() {
  textstorage_.Clear();
}
const ::Text& Voip::textstorage(int index) const {
  // @@protoc_insertion_point(field_get:Voip.textStorage)
  return textstorage_.Get(index);
}
::Text* Voip::mutable_textstorage(int index) {
  // @@protoc_insertion_point(field_mutable:Voip.textStorage)
  return textstorage_.Mutable(index);
}
::Text* Voip::add_textstorage() {
  // @@protoc_insertion_point(field_add:Voip.textStorage)
  return textstorage_.Add();
}
::google::protobuf::RepeatedPtrField< ::Text >*
Voip::mutable_textstorage() {
  // @@protoc_insertion_point(field_mutable_list:Voip.textStorage)
  return &textstorage_;
}
const ::google::protobuf::RepeatedPtrField< ::Text >&
Voip::textstorage() const {
  // @@protoc_insertion_point(field_list:Voip.textStorage)
  return textstorage_;
}

// .File file = 102;
bool Voip::has_file() const {
  return this != internal_default_instance() && file_ != NULL;
}
void Voip::clear_file() {
  if (GetArenaNoVirtual() == NULL && file_ != NULL) delete file_;
  file_ = NULL;
}
const ::File& Voip::file() const {
  const ::File* p = file_;
  // @@protoc_insertion_point(field_get:Voip.file)
  return p != NULL ? *p : *reinterpret_cast<const ::File*>(
      &::_File_default_instance_);
}
::File* Voip::mutable_file() {
  
  if (file_ == NULL) {
    file_ = new ::File;
  }
  // @@protoc_insertion_point(field_mutable:Voip.file)
  return file_;
}
::File* Voip::release_file() {
  // @@protoc_insertion_point(field_release:Voip.file)
  
  ::File* temp = file_;
  file_ = NULL;
  return temp;
}
void Voip::set_allocated_file(::File* file) {
  delete file_;
  file_ = file;
  if (file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Voip.file)
}

// bytes payload = 103;
void Voip::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Voip::payload() const {
  // @@protoc_insertion_point(field_get:Voip.payload)
  return payload_.GetNoArena();
}
void Voip::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Voip.payload)
}
#if LANG_CXX11
void Voip::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Voip.payload)
}
#endif
void Voip::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Voip.payload)
}
void Voip::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Voip.payload)
}
::std::string* Voip::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:Voip.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Voip::release_payload() {
  // @@protoc_insertion_point(field_release:Voip.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Voip::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:Voip.payload)
}

// .Call call = 104;
bool Voip::has_call() const {
  return this != internal_default_instance() && call_ != NULL;
}
void Voip::clear_call() {
  if (GetArenaNoVirtual() == NULL && call_ != NULL) delete call_;
  call_ = NULL;
}
const ::Call& Voip::call() const {
  const ::Call* p = call_;
  // @@protoc_insertion_point(field_get:Voip.call)
  return p != NULL ? *p : *reinterpret_cast<const ::Call*>(
      &::_Call_default_instance_);
}
::Call* Voip::mutable_call() {
  
  if (call_ == NULL) {
    call_ = new ::Call;
  }
  // @@protoc_insertion_point(field_mutable:Voip.call)
  return call_;
}
::Call* Voip::release_call() {
  // @@protoc_insertion_point(field_release:Voip.call)
  
  ::Call* temp = call_;
  call_ = NULL;
  return temp;
}
void Voip::set_allocated_call(::Call* call) {
  delete call_;
  call_ = call;
  if (call) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Voip.call)
}

// .Av av = 105;
bool Voip::has_av() const {
  return this != internal_default_instance() && av_ != NULL;
}
void Voip::clear_av() {
  if (GetArenaNoVirtual() == NULL && av_ != NULL) delete av_;
  av_ = NULL;
}
const ::Av& Voip::av() const {
  const ::Av* p = av_;
  // @@protoc_insertion_point(field_get:Voip.av)
  return p != NULL ? *p : *reinterpret_cast<const ::Av*>(
      &::_Av_default_instance_);
}
::Av* Voip::mutable_av() {
  
  if (av_ == NULL) {
    av_ = new ::Av;
  }
  // @@protoc_insertion_point(field_mutable:Voip.av)
  return av_;
}
::Av* Voip::release_av() {
  // @@protoc_insertion_point(field_release:Voip.av)
  
  ::Av* temp = av_;
  av_ = NULL;
  return temp;
}
void Voip::set_allocated_av(::Av* av) {
  delete av_;
  av_ = av;
  if (av) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Voip.av)
}

// .AVSession audioSession = 106;
bool Voip::has_audiosession() const {
  return this != internal_default_instance() && audiosession_ != NULL;
}
void Voip::clear_audiosession() {
  if (GetArenaNoVirtual() == NULL && audiosession_ != NULL) delete audiosession_;
  audiosession_ = NULL;
}
const ::AVSession& Voip::audiosession() const {
  const ::AVSession* p = audiosession_;
  // @@protoc_insertion_point(field_get:Voip.audioSession)
  return p != NULL ? *p : *reinterpret_cast<const ::AVSession*>(
      &::_AVSession_default_instance_);
}
::AVSession* Voip::mutable_audiosession() {
  
  if (audiosession_ == NULL) {
    audiosession_ = new ::AVSession;
  }
  // @@protoc_insertion_point(field_mutable:Voip.audioSession)
  return audiosession_;
}
::AVSession* Voip::release_audiosession() {
  // @@protoc_insertion_point(field_release:Voip.audioSession)
  
  ::AVSession* temp = audiosession_;
  audiosession_ = NULL;
  return temp;
}
void Voip::set_allocated_audiosession(::AVSession* audiosession) {
  delete audiosession_;
  audiosession_ = audiosession;
  if (audiosession) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Voip.audioSession)
}

// .AVSession videoSession = 107;
bool Voip::has_videosession() const {
  return this != internal_default_instance() && videosession_ != NULL;
}
void Voip::clear_videosession() {
  if (GetArenaNoVirtual() == NULL && videosession_ != NULL) delete videosession_;
  videosession_ = NULL;
}
const ::AVSession& Voip::videosession() const {
  const ::AVSession* p = videosession_;
  // @@protoc_insertion_point(field_get:Voip.videoSession)
  return p != NULL ? *p : *reinterpret_cast<const ::AVSession*>(
      &::_AVSession_default_instance_);
}
::AVSession* Voip::mutable_videosession() {
  
  if (videosession_ == NULL) {
    videosession_ = new ::AVSession;
  }
  // @@protoc_insertion_point(field_mutable:Voip.videoSession)
  return videosession_;
}
::AVSession* Voip::release_videosession() {
  // @@protoc_insertion_point(field_release:Voip.videoSession)
  
  ::AVSession* temp = videosession_;
  videosession_ = NULL;
  return temp;
}
void Voip::set_allocated_videosession(::AVSession* videosession) {
  delete videosession_;
  videosession_ = videosession;
  if (videosession) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Voip.videoSession)
}

// .AVQuality avQuality = 18;
bool Voip::has_avquality() const {
  return this != internal_default_instance() && avquality_ != NULL;
}
void Voip::clear_avquality() {
  if (GetArenaNoVirtual() == NULL && avquality_ != NULL) delete avquality_;
  avquality_ = NULL;
}
const ::AVQuality& Voip::avquality() const {
  const ::AVQuality* p = avquality_;
  // @@protoc_insertion_point(field_get:Voip.avQuality)
  return p != NULL ? *p : *reinterpret_cast<const ::AVQuality*>(
      &::_AVQuality_default_instance_);
}
::AVQuality* Voip::mutable_avquality() {
  
  if (avquality_ == NULL) {
    avquality_ = new ::AVQuality;
  }
  // @@protoc_insertion_point(field_mutable:Voip.avQuality)
  return avquality_;
}
::AVQuality* Voip::release_avquality() {
  // @@protoc_insertion_point(field_release:Voip.avQuality)
  
  ::AVQuality* temp = avquality_;
  avquality_ = NULL;
  return temp;
}
void Voip::set_allocated_avquality(::AVQuality* avquality) {
  delete avquality_;
  avquality_ = avquality;
  if (avquality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Voip.avQuality)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
