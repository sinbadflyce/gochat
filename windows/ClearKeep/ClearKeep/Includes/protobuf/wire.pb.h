// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wire.proto

#ifndef PROTOBUF_wire_2eproto__INCLUDED
#define PROTOBUF_wire_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class Contact;
class ContactDefaultTypeInternal;
extern ContactDefaultTypeInternal _Contact_default_instance_;
class Login;
class LoginDefaultTypeInternal;
extern LoginDefaultTypeInternal _Login_default_instance_;
class PlainText;
class PlainTextDefaultTypeInternal;
extern PlainTextDefaultTypeInternal _PlainText_default_instance_;
class Store;
class StoreDefaultTypeInternal;
extern StoreDefaultTypeInternal _Store_default_instance_;
class Wire;
class WireDefaultTypeInternal;
extern WireDefaultTypeInternal _Wire_default_instance_;

namespace protobuf_wire_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_wire_2eproto

enum Wire_Which {
  Wire_Which_LOGIN = 0,
  Wire_Which_CONTACTS = 1,
  Wire_Which_PRESENCE = 2,
  Wire_Which_STORE = 3,
  Wire_Which_LOAD = 4,
  Wire_Which_PUBLIC_KEY = 5,
  Wire_Which_PUBLIC_KEY_RESPONSE = 6,
  Wire_Which_HANDSHAKE = 7,
  Wire_Which_PAYLOAD = 8,
  Wire_Which_LOGIN_RESPONSE = 9,
  Wire_Which_PLAIN_TEXT = 10,
  Wire_Which_Wire_Which_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Wire_Which_Wire_Which_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Wire_Which_IsValid(int value);
const Wire_Which Wire_Which_Which_MIN = Wire_Which_LOGIN;
const Wire_Which Wire_Which_Which_MAX = Wire_Which_PLAIN_TEXT;
const int Wire_Which_Which_ARRAYSIZE = Wire_Which_Which_MAX + 1;

const ::google::protobuf::EnumDescriptor* Wire_Which_descriptor();
inline const ::std::string& Wire_Which_Name(Wire_Which value) {
  return ::google::protobuf::internal::NameOfEnum(
    Wire_Which_descriptor(), value);
}
inline bool Wire_Which_Parse(
    const ::std::string& name, Wire_Which* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Wire_Which>(
    Wire_Which_descriptor(), name, value);
}
// ===================================================================

class Contact : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Contact) */ {
 public:
  Contact();
  virtual ~Contact();

  Contact(const Contact& from);

  inline Contact& operator=(const Contact& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Contact(Contact&& from) noexcept
    : Contact() {
    *this = ::std::move(from);
  }

  inline Contact& operator=(Contact&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Contact& default_instance();

  static inline const Contact* internal_default_instance() {
    return reinterpret_cast<const Contact*>(
               &_Contact_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Contact* other);
  friend void swap(Contact& a, Contact& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Contact* New() const PROTOBUF_FINAL { return New(NULL); }

  Contact* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Contact& from);
  void MergeFrom(const Contact& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Contact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string deviceToken = 4;
  void clear_devicetoken();
  static const int kDeviceTokenFieldNumber = 4;
  const ::std::string& devicetoken() const;
  void set_devicetoken(const ::std::string& value);
  #if LANG_CXX11
  void set_devicetoken(::std::string&& value);
  #endif
  void set_devicetoken(const char* value);
  void set_devicetoken(const char* value, size_t size);
  ::std::string* mutable_devicetoken();
  ::std::string* release_devicetoken();
  void set_allocated_devicetoken(::std::string* devicetoken);

  // bool online = 3;
  void clear_online();
  static const int kOnlineFieldNumber = 3;
  bool online() const;
  void set_online(bool value);

  // @@protoc_insertion_point(class_scope:Contact)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr devicetoken_;
  bool online_;
  mutable int _cached_size_;
  friend struct protobuf_wire_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Store : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Store) */ {
 public:
  Store();
  virtual ~Store();

  Store(const Store& from);

  inline Store& operator=(const Store& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Store(Store&& from) noexcept
    : Store() {
    *this = ::std::move(from);
  }

  inline Store& operator=(Store&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Store& default_instance();

  static inline const Store* internal_default_instance() {
    return reinterpret_cast<const Store*>(
               &_Store_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Store* other);
  friend void swap(Store& a, Store& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Store* New() const PROTOBUF_FINAL { return New(NULL); }

  Store* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Store& from);
  void MergeFrom(const Store& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Store* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:Store)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable int _cached_size_;
  friend struct protobuf_wire_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Login : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Login) */ {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Login(Login&& from) noexcept
    : Login() {
    *this = ::std::move(from);
  }

  inline Login& operator=(Login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  static inline const Login* internal_default_instance() {
    return reinterpret_cast<const Login*>(
               &_Login_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Login* other);
  friend void swap(Login& a, Login& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Login* New() const PROTOBUF_FINAL { return New(NULL); }

  Login* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Login* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string userName = 2;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string authenToken = 3;
  void clear_authentoken();
  static const int kAuthenTokenFieldNumber = 3;
  const ::std::string& authentoken() const;
  void set_authentoken(const ::std::string& value);
  #if LANG_CXX11
  void set_authentoken(::std::string&& value);
  #endif
  void set_authentoken(const char* value);
  void set_authentoken(const char* value, size_t size);
  ::std::string* mutable_authentoken();
  ::std::string* release_authentoken();
  void set_allocated_authentoken(::std::string* authentoken);

  // string deviceToken = 4;
  void clear_devicetoken();
  static const int kDeviceTokenFieldNumber = 4;
  const ::std::string& devicetoken() const;
  void set_devicetoken(const ::std::string& value);
  #if LANG_CXX11
  void set_devicetoken(::std::string&& value);
  #endif
  void set_devicetoken(const char* value);
  void set_devicetoken(const char* value, size_t size);
  ::std::string* mutable_devicetoken();
  ::std::string* release_devicetoken();
  void set_allocated_devicetoken(::std::string* devicetoken);

  // string platform = 5;
  void clear_platform();
  static const int kPlatformFieldNumber = 5;
  const ::std::string& platform() const;
  void set_platform(const ::std::string& value);
  #if LANG_CXX11
  void set_platform(::std::string&& value);
  #endif
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  ::std::string* mutable_platform();
  ::std::string* release_platform();
  void set_allocated_platform(::std::string* platform);

  // uint32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Login)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr authentoken_;
  ::google::protobuf::internal::ArenaStringPtr devicetoken_;
  ::google::protobuf::internal::ArenaStringPtr platform_;
  ::google::protobuf::uint32 type_;
  mutable int _cached_size_;
  friend struct protobuf_wire_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlainText : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PlainText) */ {
 public:
  PlainText();
  virtual ~PlainText();

  PlainText(const PlainText& from);

  inline PlainText& operator=(const PlainText& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlainText(PlainText&& from) noexcept
    : PlainText() {
    *this = ::std::move(from);
  }

  inline PlainText& operator=(PlainText&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlainText& default_instance();

  static inline const PlainText* internal_default_instance() {
    return reinterpret_cast<const PlainText*>(
               &_PlainText_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PlainText* other);
  friend void swap(PlainText& a, PlainText& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlainText* New() const PROTOBUF_FINAL { return New(NULL); }

  PlainText* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlainText& from);
  void MergeFrom(const PlainText& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlainText* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // uint32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PlainText)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint32 type_;
  mutable int _cached_size_;
  friend struct protobuf_wire_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Wire : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Wire) */ {
 public:
  Wire();
  virtual ~Wire();

  Wire(const Wire& from);

  inline Wire& operator=(const Wire& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Wire(Wire&& from) noexcept
    : Wire() {
    *this = ::std::move(from);
  }

  inline Wire& operator=(Wire&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Wire& default_instance();

  static inline const Wire* internal_default_instance() {
    return reinterpret_cast<const Wire*>(
               &_Wire_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Wire* other);
  friend void swap(Wire& a, Wire& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Wire* New() const PROTOBUF_FINAL { return New(NULL); }

  Wire* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Wire& from);
  void MergeFrom(const Wire& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Wire* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Wire_Which Which;
  static const Which LOGIN =
    Wire_Which_LOGIN;
  static const Which CONTACTS =
    Wire_Which_CONTACTS;
  static const Which PRESENCE =
    Wire_Which_PRESENCE;
  static const Which STORE =
    Wire_Which_STORE;
  static const Which LOAD =
    Wire_Which_LOAD;
  static const Which PUBLIC_KEY =
    Wire_Which_PUBLIC_KEY;
  static const Which PUBLIC_KEY_RESPONSE =
    Wire_Which_PUBLIC_KEY_RESPONSE;
  static const Which HANDSHAKE =
    Wire_Which_HANDSHAKE;
  static const Which PAYLOAD =
    Wire_Which_PAYLOAD;
  static const Which LOGIN_RESPONSE =
    Wire_Which_LOGIN_RESPONSE;
  static const Which PLAIN_TEXT =
    Wire_Which_PLAIN_TEXT;
  static inline bool Which_IsValid(int value) {
    return Wire_Which_IsValid(value);
  }
  static const Which Which_MIN =
    Wire_Which_Which_MIN;
  static const Which Which_MAX =
    Wire_Which_Which_MAX;
  static const int Which_ARRAYSIZE =
    Wire_Which_Which_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Which_descriptor() {
    return Wire_Which_descriptor();
  }
  static inline const ::std::string& Which_Name(Which value) {
    return Wire_Which_Name(value);
  }
  static inline bool Which_Parse(const ::std::string& name,
      Which* value) {
    return Wire_Which_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Contact contacts = 102;
  int contacts_size() const;
  void clear_contacts();
  static const int kContactsFieldNumber = 102;
  const ::Contact& contacts(int index) const;
  ::Contact* mutable_contacts(int index);
  ::Contact* add_contacts();
  ::google::protobuf::RepeatedPtrField< ::Contact >*
      mutable_contacts();
  const ::google::protobuf::RepeatedPtrField< ::Contact >&
      contacts() const;

  // string sessionId = 2;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 2;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // string from = 3;
  void clear_from();
  static const int kFromFieldNumber = 3;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // string to = 4;
  void clear_to();
  static const int kToFieldNumber = 4;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // bytes payload = 106;
  void clear_payload();
  static const int kPayloadFieldNumber = 106;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // .Login login = 101;
  bool has_login() const;
  void clear_login();
  static const int kLoginFieldNumber = 101;
  const ::Login& login() const;
  ::Login* mutable_login();
  ::Login* release_login();
  void set_allocated_login(::Login* login);

  // .Store store = 104;
  bool has_store() const;
  void clear_store();
  static const int kStoreFieldNumber = 104;
  const ::Store& store() const;
  ::Store* mutable_store();
  ::Store* release_store();
  void set_allocated_store(::Store* store);

  // .PlainText plainText = 107;
  bool has_plaintext() const;
  void clear_plaintext();
  static const int kPlainTextFieldNumber = 107;
  const ::PlainText& plaintext() const;
  ::PlainText* mutable_plaintext();
  ::PlainText* release_plaintext();
  void set_allocated_plaintext(::PlainText* plaintext);

  // uint32 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // .Wire.Which which = 5;
  void clear_which();
  static const int kWhichFieldNumber = 5;
  ::Wire_Which which() const;
  void set_which(::Wire_Which value);

  // @@protoc_insertion_point(class_scope:Wire)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Contact > contacts_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::Login* login_;
  ::Store* store_;
  ::PlainText* plaintext_;
  ::google::protobuf::uint32 version_;
  int which_;
  mutable int _cached_size_;
  friend struct protobuf_wire_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Contact

// string id = 1;
inline void Contact::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Contact::id() const {
  // @@protoc_insertion_point(field_get:Contact.id)
  return id_.GetNoArena();
}
inline void Contact::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Contact.id)
}
#if LANG_CXX11
inline void Contact::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Contact.id)
}
#endif
inline void Contact::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Contact.id)
}
inline void Contact::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Contact.id)
}
inline ::std::string* Contact::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:Contact.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact::release_id() {
  // @@protoc_insertion_point(field_release:Contact.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Contact.id)
}

// string name = 2;
inline void Contact::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Contact::name() const {
  // @@protoc_insertion_point(field_get:Contact.name)
  return name_.GetNoArena();
}
inline void Contact::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Contact.name)
}
#if LANG_CXX11
inline void Contact::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Contact.name)
}
#endif
inline void Contact::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Contact.name)
}
inline void Contact::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Contact.name)
}
inline ::std::string* Contact::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Contact.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact::release_name() {
  // @@protoc_insertion_point(field_release:Contact.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Contact.name)
}

// bool online = 3;
inline void Contact::clear_online() {
  online_ = false;
}
inline bool Contact::online() const {
  // @@protoc_insertion_point(field_get:Contact.online)
  return online_;
}
inline void Contact::set_online(bool value) {
  
  online_ = value;
  // @@protoc_insertion_point(field_set:Contact.online)
}

// string deviceToken = 4;
inline void Contact::clear_devicetoken() {
  devicetoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Contact::devicetoken() const {
  // @@protoc_insertion_point(field_get:Contact.deviceToken)
  return devicetoken_.GetNoArena();
}
inline void Contact::set_devicetoken(const ::std::string& value) {
  
  devicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Contact.deviceToken)
}
#if LANG_CXX11
inline void Contact::set_devicetoken(::std::string&& value) {
  
  devicetoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Contact.deviceToken)
}
#endif
inline void Contact::set_devicetoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Contact.deviceToken)
}
inline void Contact::set_devicetoken(const char* value, size_t size) {
  
  devicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Contact.deviceToken)
}
inline ::std::string* Contact::mutable_devicetoken() {
  
  // @@protoc_insertion_point(field_mutable:Contact.deviceToken)
  return devicetoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact::release_devicetoken() {
  // @@protoc_insertion_point(field_release:Contact.deviceToken)
  
  return devicetoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contact::set_allocated_devicetoken(::std::string* devicetoken) {
  if (devicetoken != NULL) {
    
  } else {
    
  }
  devicetoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicetoken);
  // @@protoc_insertion_point(field_set_allocated:Contact.deviceToken)
}

// -------------------------------------------------------------------

// Store

// bytes key = 1;
inline void Store::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Store::key() const {
  // @@protoc_insertion_point(field_get:Store.key)
  return key_.GetNoArena();
}
inline void Store::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Store.key)
}
#if LANG_CXX11
inline void Store::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Store.key)
}
#endif
inline void Store::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Store.key)
}
inline void Store::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Store.key)
}
inline ::std::string* Store::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:Store.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Store::release_key() {
  // @@protoc_insertion_point(field_release:Store.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Store::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:Store.key)
}

// -------------------------------------------------------------------

// Login

// uint32 type = 1;
inline void Login::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 Login::type() const {
  // @@protoc_insertion_point(field_get:Login.type)
  return type_;
}
inline void Login::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Login.type)
}

// string userName = 2;
inline void Login::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Login::username() const {
  // @@protoc_insertion_point(field_get:Login.userName)
  return username_.GetNoArena();
}
inline void Login::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.userName)
}
#if LANG_CXX11
inline void Login::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login.userName)
}
#endif
inline void Login::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.userName)
}
inline void Login::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.userName)
}
inline ::std::string* Login::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:Login.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login::release_username() {
  // @@protoc_insertion_point(field_release:Login.userName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:Login.userName)
}

// string authenToken = 3;
inline void Login::clear_authentoken() {
  authentoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Login::authentoken() const {
  // @@protoc_insertion_point(field_get:Login.authenToken)
  return authentoken_.GetNoArena();
}
inline void Login::set_authentoken(const ::std::string& value) {
  
  authentoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.authenToken)
}
#if LANG_CXX11
inline void Login::set_authentoken(::std::string&& value) {
  
  authentoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login.authenToken)
}
#endif
inline void Login::set_authentoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  authentoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.authenToken)
}
inline void Login::set_authentoken(const char* value, size_t size) {
  
  authentoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.authenToken)
}
inline ::std::string* Login::mutable_authentoken() {
  
  // @@protoc_insertion_point(field_mutable:Login.authenToken)
  return authentoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login::release_authentoken() {
  // @@protoc_insertion_point(field_release:Login.authenToken)
  
  return authentoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_allocated_authentoken(::std::string* authentoken) {
  if (authentoken != NULL) {
    
  } else {
    
  }
  authentoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authentoken);
  // @@protoc_insertion_point(field_set_allocated:Login.authenToken)
}

// string deviceToken = 4;
inline void Login::clear_devicetoken() {
  devicetoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Login::devicetoken() const {
  // @@protoc_insertion_point(field_get:Login.deviceToken)
  return devicetoken_.GetNoArena();
}
inline void Login::set_devicetoken(const ::std::string& value) {
  
  devicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.deviceToken)
}
#if LANG_CXX11
inline void Login::set_devicetoken(::std::string&& value) {
  
  devicetoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login.deviceToken)
}
#endif
inline void Login::set_devicetoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.deviceToken)
}
inline void Login::set_devicetoken(const char* value, size_t size) {
  
  devicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.deviceToken)
}
inline ::std::string* Login::mutable_devicetoken() {
  
  // @@protoc_insertion_point(field_mutable:Login.deviceToken)
  return devicetoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login::release_devicetoken() {
  // @@protoc_insertion_point(field_release:Login.deviceToken)
  
  return devicetoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_allocated_devicetoken(::std::string* devicetoken) {
  if (devicetoken != NULL) {
    
  } else {
    
  }
  devicetoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicetoken);
  // @@protoc_insertion_point(field_set_allocated:Login.deviceToken)
}

// string platform = 5;
inline void Login::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Login::platform() const {
  // @@protoc_insertion_point(field_get:Login.platform)
  return platform_.GetNoArena();
}
inline void Login::set_platform(const ::std::string& value) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.platform)
}
#if LANG_CXX11
inline void Login::set_platform(::std::string&& value) {
  
  platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login.platform)
}
#endif
inline void Login::set_platform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.platform)
}
inline void Login::set_platform(const char* value, size_t size) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.platform)
}
inline ::std::string* Login::mutable_platform() {
  
  // @@protoc_insertion_point(field_mutable:Login.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login::release_platform() {
  // @@protoc_insertion_point(field_release:Login.platform)
  
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    
  } else {
    
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:Login.platform)
}

// -------------------------------------------------------------------

// PlainText

// uint32 type = 1;
inline void PlainText::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 PlainText::type() const {
  // @@protoc_insertion_point(field_get:PlainText.type)
  return type_;
}
inline void PlainText::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:PlainText.type)
}

// string content = 2;
inline void PlainText::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlainText::content() const {
  // @@protoc_insertion_point(field_get:PlainText.content)
  return content_.GetNoArena();
}
inline void PlainText::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlainText.content)
}
#if LANG_CXX11
inline void PlainText::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlainText.content)
}
#endif
inline void PlainText::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlainText.content)
}
inline void PlainText::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlainText.content)
}
inline ::std::string* PlainText::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:PlainText.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlainText::release_content() {
  // @@protoc_insertion_point(field_release:PlainText.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlainText::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:PlainText.content)
}

// -------------------------------------------------------------------

// Wire

// uint32 version = 1;
inline void Wire::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 Wire::version() const {
  // @@protoc_insertion_point(field_get:Wire.version)
  return version_;
}
inline void Wire::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:Wire.version)
}

// string sessionId = 2;
inline void Wire::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Wire::sessionid() const {
  // @@protoc_insertion_point(field_get:Wire.sessionId)
  return sessionid_.GetNoArena();
}
inline void Wire::set_sessionid(const ::std::string& value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Wire.sessionId)
}
#if LANG_CXX11
inline void Wire::set_sessionid(::std::string&& value) {
  
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Wire.sessionId)
}
#endif
inline void Wire::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Wire.sessionId)
}
inline void Wire::set_sessionid(const char* value, size_t size) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Wire.sessionId)
}
inline ::std::string* Wire::mutable_sessionid() {
  
  // @@protoc_insertion_point(field_mutable:Wire.sessionId)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Wire::release_sessionid() {
  // @@protoc_insertion_point(field_release:Wire.sessionId)
  
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Wire::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    
  } else {
    
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:Wire.sessionId)
}

// string from = 3;
inline void Wire::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Wire::from() const {
  // @@protoc_insertion_point(field_get:Wire.from)
  return from_.GetNoArena();
}
inline void Wire::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Wire.from)
}
#if LANG_CXX11
inline void Wire::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Wire.from)
}
#endif
inline void Wire::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Wire.from)
}
inline void Wire::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Wire.from)
}
inline ::std::string* Wire::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:Wire.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Wire::release_from() {
  // @@protoc_insertion_point(field_release:Wire.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Wire::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:Wire.from)
}

// string to = 4;
inline void Wire::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Wire::to() const {
  // @@protoc_insertion_point(field_get:Wire.to)
  return to_.GetNoArena();
}
inline void Wire::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Wire.to)
}
#if LANG_CXX11
inline void Wire::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Wire.to)
}
#endif
inline void Wire::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Wire.to)
}
inline void Wire::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Wire.to)
}
inline ::std::string* Wire::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:Wire.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Wire::release_to() {
  // @@protoc_insertion_point(field_release:Wire.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Wire::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:Wire.to)
}

// .Wire.Which which = 5;
inline void Wire::clear_which() {
  which_ = 0;
}
inline ::Wire_Which Wire::which() const {
  // @@protoc_insertion_point(field_get:Wire.which)
  return static_cast< ::Wire_Which >(which_);
}
inline void Wire::set_which(::Wire_Which value) {
  
  which_ = value;
  // @@protoc_insertion_point(field_set:Wire.which)
}

// .Login login = 101;
inline bool Wire::has_login() const {
  return this != internal_default_instance() && login_ != NULL;
}
inline void Wire::clear_login() {
  if (GetArenaNoVirtual() == NULL && login_ != NULL) delete login_;
  login_ = NULL;
}
inline const ::Login& Wire::login() const {
  const ::Login* p = login_;
  // @@protoc_insertion_point(field_get:Wire.login)
  return p != NULL ? *p : *reinterpret_cast<const ::Login*>(
      &::_Login_default_instance_);
}
inline ::Login* Wire::mutable_login() {
  
  if (login_ == NULL) {
    login_ = new ::Login;
  }
  // @@protoc_insertion_point(field_mutable:Wire.login)
  return login_;
}
inline ::Login* Wire::release_login() {
  // @@protoc_insertion_point(field_release:Wire.login)
  
  ::Login* temp = login_;
  login_ = NULL;
  return temp;
}
inline void Wire::set_allocated_login(::Login* login) {
  delete login_;
  login_ = login;
  if (login) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Wire.login)
}

// repeated .Contact contacts = 102;
inline int Wire::contacts_size() const {
  return contacts_.size();
}
inline void Wire::clear_contacts() {
  contacts_.Clear();
}
inline const ::Contact& Wire::contacts(int index) const {
  // @@protoc_insertion_point(field_get:Wire.contacts)
  return contacts_.Get(index);
}
inline ::Contact* Wire::mutable_contacts(int index) {
  // @@protoc_insertion_point(field_mutable:Wire.contacts)
  return contacts_.Mutable(index);
}
inline ::Contact* Wire::add_contacts() {
  // @@protoc_insertion_point(field_add:Wire.contacts)
  return contacts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Contact >*
Wire::mutable_contacts() {
  // @@protoc_insertion_point(field_mutable_list:Wire.contacts)
  return &contacts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Contact >&
Wire::contacts() const {
  // @@protoc_insertion_point(field_list:Wire.contacts)
  return contacts_;
}

// .Store store = 104;
inline bool Wire::has_store() const {
  return this != internal_default_instance() && store_ != NULL;
}
inline void Wire::clear_store() {
  if (GetArenaNoVirtual() == NULL && store_ != NULL) delete store_;
  store_ = NULL;
}
inline const ::Store& Wire::store() const {
  const ::Store* p = store_;
  // @@protoc_insertion_point(field_get:Wire.store)
  return p != NULL ? *p : *reinterpret_cast<const ::Store*>(
      &::_Store_default_instance_);
}
inline ::Store* Wire::mutable_store() {
  
  if (store_ == NULL) {
    store_ = new ::Store;
  }
  // @@protoc_insertion_point(field_mutable:Wire.store)
  return store_;
}
inline ::Store* Wire::release_store() {
  // @@protoc_insertion_point(field_release:Wire.store)
  
  ::Store* temp = store_;
  store_ = NULL;
  return temp;
}
inline void Wire::set_allocated_store(::Store* store) {
  delete store_;
  store_ = store;
  if (store) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Wire.store)
}

// bytes payload = 106;
inline void Wire::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Wire::payload() const {
  // @@protoc_insertion_point(field_get:Wire.payload)
  return payload_.GetNoArena();
}
inline void Wire::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Wire.payload)
}
#if LANG_CXX11
inline void Wire::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Wire.payload)
}
#endif
inline void Wire::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Wire.payload)
}
inline void Wire::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Wire.payload)
}
inline ::std::string* Wire::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:Wire.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Wire::release_payload() {
  // @@protoc_insertion_point(field_release:Wire.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Wire::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:Wire.payload)
}

// .PlainText plainText = 107;
inline bool Wire::has_plaintext() const {
  return this != internal_default_instance() && plaintext_ != NULL;
}
inline void Wire::clear_plaintext() {
  if (GetArenaNoVirtual() == NULL && plaintext_ != NULL) delete plaintext_;
  plaintext_ = NULL;
}
inline const ::PlainText& Wire::plaintext() const {
  const ::PlainText* p = plaintext_;
  // @@protoc_insertion_point(field_get:Wire.plainText)
  return p != NULL ? *p : *reinterpret_cast<const ::PlainText*>(
      &::_PlainText_default_instance_);
}
inline ::PlainText* Wire::mutable_plaintext() {
  
  if (plaintext_ == NULL) {
    plaintext_ = new ::PlainText;
  }
  // @@protoc_insertion_point(field_mutable:Wire.plainText)
  return plaintext_;
}
inline ::PlainText* Wire::release_plaintext() {
  // @@protoc_insertion_point(field_release:Wire.plainText)
  
  ::PlainText* temp = plaintext_;
  plaintext_ = NULL;
  return temp;
}
inline void Wire::set_allocated_plaintext(::PlainText* plaintext) {
  delete plaintext_;
  plaintext_ = plaintext;
  if (plaintext) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Wire.plainText)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Wire_Which> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Wire_Which>() {
  return ::Wire_Which_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wire_2eproto__INCLUDED
